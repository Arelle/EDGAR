{"version":3,"file":"fetch-merge.bundle.eeec912db50bd415eee6.min.js","mappings":";uBAAIA,ECAAC,wBC6DQC,EAUAC,EAQAC,kDC/DC,EACb,CACCC,QAAS,OACTC,WAAY,OAEZC,eAAkC,oBAAXC,QAA0BA,OAAOC,aAAaC,QAAQ,mBAAqB,QAElGC,YAA+B,oBAAXH,QAAyE,SAA/CA,OAAOC,aAAaC,QAAQ,iBAA6B,EAEvGE,kBAAmB,CAAC,EAEpBC,qBAAsB,GAEtBC,yBAA0B,KAE1BC,uBAAwB,GAExBC,YAAa,GAEbC,iBAAkB,GAElBC,eAAgB,GAEhBC,SAAU,GAEVC,YAAa,SAACD,GACTA,IACH,EAAUA,SAAWA,EACrBE,eAAeC,QAAQ,WAAYC,KAAKC,UAAUL,IAEpD,EAEAM,8BAA+B,WAC9B,IAAMC,EAAoBL,eAAeX,QAAQ,YACjD,OAAOa,KAAKI,MAAMD,GAAqB,KACxC,EAEAE,UAAW,CAAC,EAEZC,mBAAoB,CAAC,EAErBC,oBAAqB,KAGrBC,WAAY,KACZC,iBAAkB,SAACC,GAClB,OAAIA,GAA0B,iBAAVA,GACZ,EAAUF,YAAc,EAAUA,WAAWE,GACjD,EAAUF,WAAWE,GAIlB,IACR,EAEAC,kBAAmB,WAElB,OAD8BC,SAASC,eAAe,qBAAsBC,SAE7E,EAEAC,iBAAkB,iBACjB,OAA+D,QAAxD,EAAAH,SAASI,cAA2B,4BAAoB,eAAEC,eAAgB,CAClF,EAEAC,uBAAwB,CAACC,WAAY,EAAGC,WAAY,IC8D9C,SAASC,EAAYC,GAExB,OAAOC,QAAQD,EACnB,EFpFA,SAAY3C,GACR,kBACA,eACH,CAHD,CAAYA,IAAAA,EAAO,KAUnB,SAAYC,GAER,oBACA,kBACA,oBACA,iBACH,CAND,CAAYA,IAAAA,EAAS,KAQrB,SAAYC,GAER,cACA,sBACA,wBACA,+BACA,uCACA,sBACA,6BACA,qCACA,sBACA,6BACA,qCACA,wBAEA,kBACA,0BACA,4BACA,mCACA,2CACA,yBACH,CArBD,CAAYA,IAAAA,EAAQ,mSGtEpB,aAKI,WAAY2C,GAFJ,KAAAC,YAAiD,KAIrDC,KAAKF,MAAQA,CACjB,CAsBJ,OApBW,YAAAG,MAAP,SAAaC,EAA4BC,SAErC,GAAwB,MAApBH,KAAKD,YACT,CACI,IAAIK,EAAI,IAAIC,IACZL,KAAKD,2MAAc,MAAIC,KAAKF,MAAMQ,WAAQ,GACrCC,KAAI,SAAC,OAAEC,EAAE,KAAEL,EAAI,OAAED,EAAU,aAAM,OAAC5B,KAAKC,UAAU,CAAE4B,KAAI,EAAED,WAAU,IAAKM,EAAvC,IACjCC,QAAO,SAACC,EAAK,gBAACC,EAAU,KAAEH,EAAE,KAErBI,EAASF,EAAIG,IAAIF,IAAe,GAIpC,OAHAC,EAAOE,KAAKN,GACZE,EAAIK,IAAIJ,EAAYC,GAEbF,CACX,GAAGN,GAGX,IAAMY,EAAM1C,KAAKC,UAAU,CAAE4B,KAAI,EAAED,WAAU,IAC7C,OAAgC,QAAzB,EAAAF,KAAKD,YAAYc,IAAIG,UAAI,eAAEC,UAAW,IACjD,EACJ,EA9BA,GCwEaC,EAA8B,SAACC,GACxC,IAAIC,EAA2B,CAAC,EAuBhC,OAtBAA,EAAKC,SAAWF,EAAQE,SAEpBF,EAAQG,cACRF,EAAKjB,KAAOgB,EAAQG,aAAanB,KACjCiB,EAAKlB,WAAaiB,EAAQG,aAAapB,WACvCkB,EAAKG,KAAOJ,EAAQG,aAAaE,QACjCJ,EAAKK,UAAYN,EAAQG,aAAaG,WAC/BN,EAAQO,aACfN,EAAKjB,KAAOgB,EAAQO,YAAYvB,KAChCiB,EAAKlB,WAAaiB,EAAQO,YAAYxB,WACtCkB,EAAKG,KAAOJ,EAAQO,YAAYF,QAChCJ,EAAKK,UAAYN,EAAQO,YAAYD,YAErCE,QAAQC,KAAK,uCAAgCT,EAAQU,UAAS,sBAO9DT,EAAO,MAEJA,CACX,EAQMU,EAAkB,SAAC9C,EAAe+C,GACpC,IAAMC,EAAehD,EAAMiD,cAOrBC,EAAwB,CAC1B,MAAS,UACT,SAAY,UAGZ,WAAc,UACd,MAAS,UACT,SAAY,UACZ,OAAU,UACV,QAAW,UACX,WAAc,aACd,aAAgB,eAChB,YAAe,eACf,cAAe,gBAEbC,EAAqB,CACvB,MAAS,QACT,SAAY,gCACZ,UAAa,uBACb,WAAc,uBACd,WAAc,oCACd,MAAS,gCACT,SAAY,sBACZ,OAAU,eACV,QAAW,gBACX,WAAc,aACd,aAAgB,eAChB,YAAe,eACf,cAAe,gBAGnB,OAAIJ,EACIC,KAAgBG,EACTA,EAAmBH,IAE1BL,QAAQS,KAAK,oDAA6CJ,GAAgB,sBACnE,MAGPA,KAAgBE,EACTA,EAAsBF,IAE7BL,QAAQS,KAAK,uDAAgDJ,GAAgB,sBACtE,KAGnB,EAEO,SAASK,EAAUC,EAAaC,GAEnC,OAAOC,MAAMF,EAAKC,GAAME,MAAK,SAACC,GAE1B,GAAIA,EAASC,QAAU,KAAOD,EAASC,QAAU,IAC7C,OAAOD,EAASE,OAEhB,MAAM,IAAIC,MAAMH,EAASC,OAAOG,WACxC,GACJ,CAaO,SAASC,EAAaC,GAyBzB,MAtBA,CACI,EAAG,OACH,EAAG,OACH,EAAG,WACH,EAAG,YACH,EAAG,gBACH,EAAG,oBACH,EAAG,WACH,EAAG,eACH,EAAG,mBACH,EAAG,WACH,GAAI,eACJ,GAAI,mBACJ,GAAI,YACJ,KAAM,SACN,KAAM,aACN,KAAM,cACN,KAAM,kBACN,KAAM,sBACN,KAAM,cAGUA,GAAS,KAAO,IACxC,qNC7LA,aAOI,WAAY,OAAEC,EAAI,OAAEnD,EAAK,QAAEoD,EAAY,eAEnClD,KAAKiD,KAAOA,EACZjD,KAAKF,MAAQA,EACbE,KAAKkD,aAAeA,EAEpBlD,KAAKmD,YAAc,IAAIC,EAAgBpD,KAAKF,MAChD,CA2EJ,OAzEW,YAAAuD,OAAP,sBAEUC,iMAAW,4RAAItD,KAAKiD,OAAI,GACzBM,MAAK,SAACC,EAAGC,GAAM,OAACA,EAAEC,SAAWF,EAAEE,OAAhB,IACfnD,KAAI,SAACoD,GACF,WAAIC,SAAc,SAACC,GAEf,EAAKC,uBAAuBH,GAC5BE,GACJ,GAJA,IAMR,OAAOD,QAAQG,IAAIT,EACvB,EAEQ,YAAAQ,uBAAR,SAA+BJ,WAGrBM,EAAmBC,YAAYC,MAEjCC,GAAI,QAAKT,EAAQU,MAAO,CAAC,GAEvBC,EAAeC,MAAMC,KAAKJ,EAAE,qBAElC,IAAoB,gTAAAE,GAAY,8BAChC,CADI,IAAIG,EAAQ,QAENhE,EAAK2D,EAAEK,GAAUC,KAAK,OAASzE,KAAKmD,YAAYlD,MAAMkE,EAAEK,GAAUC,KAAK,cAAeN,EAAEK,GAAUC,KAAK,SAC1GjE,EAECR,KAAK0E,UAAUlE,EAAI2D,EAAEK,GAAWd,EAAQiB,OAIX,IAAI,KAC7BC,MAAM,yKAIlB,IAAMC,EAAiBZ,YAAYC,MAGzBY,EAAQT,EAAaU,QACE,IAAI,KAC7BC,MAAM,gDAAyCH,EAAiBb,GAAkBiB,QAAQ,GAAE,gBAAQH,EAAK,UAErH,EAEQ,YAAAJ,UAAR,SAAkBlE,EAAY0E,EAA6BC,aAEjD/D,EAAOpB,KAAKF,MAAMe,IAAIL,GAC5B,OAAKY,GAMLpB,KAAKF,MAAMiB,IAAIP,EAAE,OAEVY,GAAI,CACPgE,IAAKF,EAAQtC,OACbyC,OAAQH,EAAQT,KAAK,UAAYS,EAAQT,KAAK,UAAY,KAC1Da,aAAcJ,EAAQK,UAAUC,KAAK,WAAWvD,cAAcwD,SAAS,WACvEC,UAA8B,QAApB,EAAAR,EAAQT,KAAK,eAAO,eAAEkB,MAAM,KAAK,GAAG1D,iBAAkBjC,KAAKkD,aACrE0C,cAAwE,iBAAlC,QAAvB,EAAAV,EAAQM,KAAK,kBAAU,eAAEG,MAAM,KAAK,GAAG1D,eACtD4D,WAAqE,gBAAlC,QAAvB,EAAAX,EAAQM,KAAK,kBAAU,eAAEG,MAAM,KAAK,GAAG1D,eACnD6D,eAAyC,MAAzBZ,EAAQT,KAAK,QAC7BsB,KAAgC,MAAzBb,EAAQT,KAAK,QAAmB,WAAa,KACpDlD,KAAM4D,EACNnC,MAAOD,EAAamC,EAAQT,KAAK,WAAa,GAC9CuB,aAAc,MAGX5E,EAAKZ,KApBRmB,QAAQiD,MAAM,oCAAqCpE,GAC5C,GAoBf,EACJ,EAzFA,ihECLA,aAYI,WAAYxB,SAPJ,KAAAiH,eAA+B,CAAC,EAEhC,KAAA/H,SAA2B,GAC3B,KAAAgI,YAA6B,KAMjClG,KAAKmG,SAAWnH,EAAMmH,SACtBnG,KAAKoG,OAASpH,EAAMoH,OACpBpG,KAAKkD,aAAelE,EAAMkE,cAAgB,KAC1ClD,KAAKqG,UAA0B,QAAd,EAAArH,EAAMqC,gBAAQ,QAAI,GACnCrB,KAAKsG,QAAUtH,EAAMsH,OACzB,CA+/BJ,OA7/BiB,YAAA9D,MAAb,sCAAsBoB,SAAO,wFAEnB2C,EAAkB,WACpB,OAAO3C,QAAQG,IAAI,CAAC,EAAKyC,YAAa,EAAKC,qBAAqBhE,MAAK,SAAO,gBAACQ,EAAI,KAAEyD,EAAO,kFAItF,IAHMC,EAAS,SAAI1D,IAAI,IAAEyD,IAAO,GAAEE,QAAO,SAAC1B,GACtC,QAAAA,GAAU2B,OAAOC,UAAUC,eAAeC,KAAK9B,EAAS,QAAxD,KAEOH,OAEP,KAAM,CAAEhB,IAAK,CAAEa,OAAO,EAAMqC,SADNN,EAAOpG,KAAI,SAAAmD,GAAW,OAAAA,EAAQuD,QAAR,IACQC,gBAOxDjE,EAAK2D,QAAO,SAACjD,GAAkC,gBAAWA,CAAX,IAC1CwD,SAAQ,SAACxD,EAAKyD,GACX,EAAKnB,eAAehD,KAAKmE,GAAOC,QAAS,EACzC,EAAKpB,eAAehD,KAAKmE,GAAOhD,MAAQT,EAAIS,KAChD,IAEJpE,KAAKiG,eAAeqB,IAAMZ,cAElC,EAEMa,EAAiB,WACnB,OAAO3D,QAAQG,IAAI,CAAC,EAAKyD,YAAa,EAAKC,iBACtChF,MAAK,SAAC,oBAACiF,EAAE,KAAEC,EAAE,KAEN/C,GAAQ,EACNqC,EAAW,OACjB,IAAsB,iTAACS,EAAIC,IAAG,8BAC9B,CADI,IAAMjF,EAAQ,QAEV,UAAWA,GAAYA,EAASkC,QAEhCqC,EAASnG,KAAK4B,EAASuE,UACvBrC,GAAQ,qGAGhB,GAAIA,EAEA,KAAM,CAAEb,IAAK,CAAEa,MAAK,EAAEqC,SAAUA,EAASC,SAI7C,IAAMU,EAAYF,EACZG,EAAgBF,EAOtB,OALA,EAAKzB,YAAc0B,EAAUxK,SAAW,KACxC,EAAKkJ,QAAUsB,EAAUtB,SAAW,CAAC,EAErC,EAAKL,eAAiB2B,EAAUvG,SAEzB,CAACuG,EAAWC,EACvB,GACR,EAGMC,EAAqC,SAACD,EAA8BxB,SAChE0B,EAAuBF,EAAcG,UAAUC,OAG/CC,EAAmB,IAAIC,IAa7B,GAZAJ,EAAqBZ,SAAQ,SAACiB,SACpBC,EAAqC,QAAb,EAAAD,EAAEE,mBAAW,eAAEjH,SACzCgH,IAA0BH,EAAiBK,IAAIF,KAC/CH,EAAiBM,IAAIH,GAGf,EAAsBhC,EAAUO,QAAO,SAAC6B,GAAS,OAAAA,EAAKC,YAAYC,SAASN,EAA1B,IAAiD,GAAhF,GACNO,OAAS,EAAKxC,OAAOwB,UAAUiB,QAAQ,iBAAkBR,EAAsBQ,QAAQ,OAAQ,aAEzH,MAGwB,QAAnB,IAAK5C,sBAAc,eAAE2C,QACtB,MAAM,IAAI/F,MAAM,uDAExB,gDAKQ+E,EAA+D,KACnE5H,KAAKiG,eAAiBjG,KAAKqG,UAAUO,QAAO,SAAC1B,GAAY,OAAAA,EAAQxB,OAAR,IAAiB,GAC/B,MAAvB1D,KAAKiG,eAIA,GAAMsB,KAF3B,aAEM,kBAAe,SAAsB,IAApCuB,EAAI,KAAEC,EAAI,KACjBjB,EAAmCiB,EAAMD,EAAKzC,WAG9CrG,KAAK9B,SFjIoB,SAAC2J,EAA8BmB,EAA4B9C,GAEhG,IAAM6B,EAAuBF,EAAcG,UAAUC,OACjDgB,EAA0BpB,EAAcqB,WAAWC,KAClD7E,MAAM8E,QAAQH,KAA0BA,EAA0B,CAACA,IAExE,IAAMI,EAAoCtB,EACrCnB,QAAO,SAAAwB,GAAK,OAAAA,EAAEkB,YAAF,IACZ/I,KAAI,SAAA6H,GAAC,MAAI,OAAoB,QAApB,EAAAA,EAAEkB,aAAaC,aAAK,eAAEtH,aAAa,IAC5CuH,MAAK,SAACC,GACH,MAAuB,aAAhBA,GAA+B,YAC1C,IAyDJ,OAlBsBT,EAAiBzI,KAAI,SAACmJ,GACxC,IAAIvI,EAAmBuI,EAIvB,IAHIC,OAAOzD,IAAgB,MAAQ/E,EAAQyI,WACvCzI,EAAQyI,QAAUzI,EAAQ0I,cAAgB1I,EAAQ2I,WAElDJ,EAAWE,SAAWF,EAAW7H,UAMjC,OAJAV,EA1Ba,SAACA,GAClBA,EAAQC,KAAOF,EAA4BC,SAAY4I,EACvD,IAAMC,EAAS7I,EAAQC,KACvB,IAAI4I,aAAM,EAANA,EAAQzI,QAAQyI,aAAM,EAANA,EAAQvI,aAAauI,aAAM,EAANA,EAAQ7J,MAAM,CAEnD,IAQM8J,EARyBD,EAAOvI,UAAUlB,KAAI,SAACiD,GACjD,OAAIA,EAAEmF,SAAS,KACPnF,EAAEmF,SAAS,mBAA2B,GACnC,iBAAUnF,EAAC,MAEXA,CAEf,IACiD0G,UAAUtD,QAAO,SAACpD,GAAa,MAAM,SAANA,CAAA,IAAc2G,KAAK,KACnGhJ,EAAQiJ,mBAAqB,8BAAuBJ,EAAOzI,KAAI,gBAAQ0I,EAAiB,mBAAWD,EAAO7J,KAAI,0BAAkB6J,EAAO9J,WAAU,MAErJ,OAAOiB,CACX,CASkBkJ,CADVlJ,EA3CiB,SAACA,WAKhBmJ,EAAiBrB,EAAwBrC,QAAO,SAAArF,SAHpCgJ,EAId,GAAIhJ,EAAK+G,cAA+B,QAAhB,EAAA/G,EAAK+G,mBAAW,eAAEkC,aAJ5BD,EAIiDhJ,EAAKgI,OAHpDZ,SAAS,SAAW4B,EAAS5B,SAAS,UAAY4B,EAAS5B,SAAS,WAIhF,OAAOxH,EAAQuH,YAAYC,SAASpH,EAAK+G,YAAYkC,SAE7D,IAMA,OALIF,EAAevF,OACf5D,EAAQsJ,gBAAgD,QAA9B,EAAiB,QAAjB,EAAAH,EAAe,UAAE,eAAEhC,mBAAW,eAAEoC,QAE1D/I,QAAQiD,MAAM,0DAEXzD,CACX,CA2BkBwJ,CAAiBxJ,KAEnByJ,cAAgB9I,EAAgBX,EAAQyI,QAASP,IAA6B,GACtFlI,EAAQ0J,MAAQ,qBFxDK,SAAC7L,EAAe8L,QAAA,IAAAA,IAAAA,GAAA,GAC7C,IAAMC,EAAqB/L,EAAMgM,WAAW,IAAK,KAC5CA,WAAW,IAAK,KAChBA,WAAW,IAAK,KAChBA,WAAW,IAAK,KACrB,OAAIF,EACO,aAAmBC,GAEnBA,CAEf,CE8C0CE,CAAkB9J,EAAQsJ,iBAAiB,IAElEtJ,EAEPQ,QAAQiD,MAAM,mCAEtB,IACCgC,QAAO,SAACzF,GAAgC,UAAGA,aAAO,EAAPA,EAASC,QAAQD,EAAQyJ,cAA5B,KAEjB,EAC5B,CE4DgCM,CAA0BnC,EAAMlC,OAAOvG,OAAOwI,EAAK5K,UAAW8B,KAAKkG,aAAe,IAClGlG,KAAKmL,oBAAoBnL,KAAK9B,UAE9B0J,EAAYkB,EACZ9I,KAAKqG,UAAYuB,EAAUvB,2BAG/B,SAAME,YAEN,OAFA,SAEO,CAAP,EAAO,CAAEnC,OAAsD,QAA/C,EAAApE,KAAKiG,eAAehD,KAAKmI,MAAK,SAACC,GAAM,OAAAA,EAAE3H,OAAF,WAAU,eAAEU,QAAS,8BAEnEpE,KAAKsL,cAAc,kCAGrB,YAAAxL,MAAb,gCAAsB8D,SAAO,sCAEzB,IAEI,MAAO,CAAP,EAAO,CAAE9D,MAAOE,KAAKuL,iBAEzB,MAAMC,GAAKxL,KAAKsL,cAAcE,oBAGrB,YAAAC,MAAb,gCAAsB7H,SAAO,mEAIrB,gCAAM5D,KAAK0L,4BASX,OATA,SASO,CAAP,EAAO,CAAE3H,IANT,CACI1C,SAAUrB,KAAKqG,UACfnI,SAAU8B,KAAK9B,SACfoI,QAAStG,KAAKsG,oCAKXtG,KAAKsL,cAAc,kCAG1B,YAAAA,cAAR,SAAsBE,GAIlB,MAFA7J,QAAQiD,MAAM4G,GAERA,GAAiB,iBAALA,GAAiB,QAASA,EAClCA,EACDA,aAAa3I,MACZ,CAAEkB,IAAK,CAAEa,OAAO,EAAMqC,SAAU,CAACuE,EAAEG,WAEnC,CAAE5H,IAAK,CAAEa,OAAO,EAAMqC,SAAU,CAAC3I,KAAKC,UAAUiN,KAC9D,EAEQ,YAAAI,2BAAR,SAAmCC,EAAwBC,EAAcC,GACrE,OAAKF,EAEAC,EAAKE,UAAU,EAAE,KAAK/J,cAAc0G,SAAS,iBAelDmD,GADAA,GADAA,GADAA,GADAA,EAAOA,EAAKd,WAAW,OAAQ,MACnBA,WAAW,OAAQ,MACnBA,WAAW,SAAU,MACrBA,WAAW,SAAU,MACrBA,WAAW,QAAS,MACpBgB,UAAUF,EAAKG,QAAQ,kBAAmBH,EAAKG,QAAQF,GAAcA,EAAWhH,QAfpF+G,EAAKnD,SAAS,+CACdhH,QAAQiD,MAAM,mCACdrH,OAAO2O,MAAM,mCACN,IAEJJ,EARgBA,CAmB/B,EAMQ,YAAAtF,UAAR,0BACUlD,EAAoC,QAAzB,EAAmB,QAAnB,EAAAtD,KAAKiG,sBAAc,eAAEhD,YAAI,eAAE1C,KAAI,SAACoD,GAC7C,OAAO,IAAIC,SAA2C,SAACC,GAEnD,IAAMgI,EAAgBlI,EAAIrB,IAAIqG,SAAS,uBACnCwD,EAASxI,EAAIrB,IACbuJ,IAEIM,EADAtF,OAAOC,UAAUC,eAAeC,KAAK,EAAKZ,OAAQ,YAAc,EAAKA,OAAOgG,QACnED,EAAOtD,QAAQ,OAAQ,YAEvBsD,EAAOtD,QAAQ,OAAQ,aAWxCxG,EAAU8J,EANV,CACIE,QAAS,CAAE,eAAgB,yBAC3BC,KAAM,UACNC,YAAa,YAIZ9J,MAAK,SAACG,GAGH,IAAM4J,EAAY,EAAKZ,2BAA2BC,EAAejJ,EAAM,WACvEiB,EAAQ,CAAEO,MAAOoI,GACrB,IACCC,OAAM,SAAC7H,GAEJf,EAAQ,CAAEe,OAAO,EAAMqC,SAAU,CAAC,UAAGrC,EAAK,6BAAqB,EAAKwB,OAAOzC,IAAG,OAClF,GACR,GACJ,IAEA,OAAKL,EAGMM,QAAQG,IAAIT,GAFZM,QAAQC,QAAQ,CAAC,CAAEe,OAAO,EAAMqC,SAAU,CAAC,2BAG1D,EAEQ,YAAAO,UAAR,sBAGI,OAAO,IAAI5D,SAAqE,SAACC,GAC7E,IFlFuBvB,EAAaC,EEkFhCmK,EAAU,EAAKtG,OAAOwB,UAS1B,OAPsB8E,EAAQ/D,SAAS,wBAE/B9B,OAAOC,UAAUC,eAAeC,KAAK,EAAKZ,OAAQ,YAAc,EAAKA,OAAOgG,UAC5EM,EAAUA,EAAQ7D,QAAQ,iBAAkB,2BFvF7BvG,EE2FNoK,EF3FmBnK,EE2FV,CAAEgK,YAAa,WFzF1C/J,MAAMF,EAAKC,GAAME,MAAK,SAACC,GAE1B,GAAIA,EAASC,QAAU,KAAOD,EAASC,QAAU,IAC7C,OAAOD,EAASiK,OAEhB,MAAM,IAAI9J,MAAMH,EAASC,OAAOG,WACxC,KEoFaL,MAAK,SAACmK,GACH,IAAIC,EAAY,EAAKzG,OAAOzC,IAAIqI,UAAU,EAAK5F,OAAOzC,IAAImJ,YAAY,KAAO,IACzED,EAAUE,WAAW,uBAAyBF,EAAUE,WAAW,gBACnEF,EAAY,EAAKzG,OAAOzC,IAAIqI,UAAU,EAAK5F,OAAOzC,IAAImJ,YAAY,aAAe,IAGrF,IAAME,EAAoBnG,OAAOoG,KAAKL,EAAKvL,UAAU8I,OAAOxE,MAAM,SAC9DzH,EAAW,CAAC,EAChB,IAAI8O,EAAkBrE,SAASkE,GAsD3B,MAAM,IAAIhK,MAAM,qCArDhB,IAAMqK,EAAkCrG,OAAOsG,QAAQP,EAAKvL,UAAUd,KAAI,SAAC,EAA6B6M,OAA7B,SAACC,EAAe,KAAEC,EAAQ,KAGjGzG,OAAOoG,KAAKK,EAASC,QAAQpG,SAAQ,SAACoG,GAClCD,EAASC,OAAOA,GAAQH,cAAgBA,CAC5C,IACAvG,OAAOvG,OAAOgN,EAASC,QAAQpG,SAAQ,SAAAoG,GACnCA,EAAO7E,YAAc2E,CACzB,IAIAnP,EAAW2I,OAAO2G,OAAOtP,EAAUoP,EAASC,QAO5C,IAAME,EAA0BJ,EAAgB1H,MAAM,KAAKpF,KAAI,SAAC2E,GAC5D,MAAO,CACHP,KAAMO,EACN5C,IAAK,EAAK8D,OAAOzC,IAAIkF,QAAQ,EAAKzC,OAAO,YAAalB,GACtDd,MAAO,KACPV,QAAS2J,EAAgB1H,MAAM,KAAKgD,SAASkE,IAAc3H,IAAY,EAAKkB,OAAO,YACnFiB,QAAQ,EAEhB,IAeA,MAZA,CACI3D,QAAS2J,EAAgB1H,MAAM,KAAKgD,SAASkE,GAC7CxL,SAAU+L,EACV7M,IAAK,IAAIF,IACTqN,aAAc7G,OAAO2G,OAAOF,GAC5B5E,YAAa2E,EACbzE,OAAQ,KACR3F,KAAMwK,EACNE,gBAAiB,CAAC,EAClBC,SAAU,GAIlB,IAEOvM,EAAD,EAAa6L,EAAgBtG,QAAO,SAAC,GAAgB,OAAP,SAAO,IAAQ,GAApD,GACTkC,EAAI,OAAmB8D,GAAI,CAAEvL,SAAQ,EAAEnD,SAAQ,EAAEd,QAASwP,EAAKxP,QAAS0L,KAAM,CAAC,EAAW+E,YAAa,KAC7GhK,EAAQgD,OAAO2G,OAAO1E,EAAM,CAAEzC,UAAW6G,IAQjD,IACCT,OAAM,SAAC7H,GAAU,OAAAf,EAAQ,CAAEe,OAAO,EAAMqC,SAAU,CAAC,UAAGrC,EAAK,6BAAqB,EAAKwB,OAAOwB,UAAS,OAApF,GAC1B,GACJ,EAEQ,YAAAH,aAAR,sBAEQqG,EAAmB9N,KAAKoG,OAAO2H,QAG7BlC,EAAgBiC,EAAiBnF,SAAS,uBAMhD,OALIkD,GAAiB7L,KAAKoG,OAAOgG,UAE7B0B,EAAmBA,EAAiBjF,QAAQ,oBAAqB,6BAG9DxG,EAAUyL,EAAkB,CAAEvB,YAAa,YAC7C9J,MAAK,SAACmK,GAEH,IAAMoB,EAAU,EAAKpC,2BAA2BC,EAAee,EAAM,oBAC/DqB,EAAe,WAAiBD,EAAS,CAAEE,SAAS,IAC1D,OAAO5P,KAAKI,MAAMuP,GAAcE,aACpC,IACC1B,OAAM,SAAC7H,GAEJ,MAAO,CAAGA,OAAO,EAAMqC,SAAU,CAAC,UAAGrC,EAAK,6BAAqB,EAAKwB,OAAO2H,QAAO,MACtF,GACR,EAEQ,YAAAtH,iBAAR,wBACQmC,EAA4B,QAAnB,EAAA5I,KAAKiG,sBAAc,eAAE2C,OAClC,IAAKA,EAAQ,OAAOhF,QAAQwK,OAAO,CAAExJ,OAAO,EAAMqC,SAAU,CAAC,6BAE7D,IAAM4E,EAAgBjD,EAAOD,SAAS,uBAYtC,OAXIkD,IAGIjD,EADA/B,OAAOC,UAAUC,eAAeC,KAAKhH,KAAKoG,OAAQ,YAAcpG,KAAKoG,OAAOgG,QACnExD,EAAOC,QAAQ,WAAY,YAE3BD,EAAOC,QAAQ,WAAY,aAMrCxG,EAAUuG,GACZnG,MAAK,SAACG,GACH,IAAMyL,EAAmB,EAAKzC,2BAA2BC,EAAejJ,EAAM,WAKxE0L,EAAqChQ,KAAKI,MAAM,WAAiB2P,EAAkB,CAAEH,SAAS,KAUpG,OARII,EAAyBC,KAAK,qBAQ3BD,CACX,IACC7B,OAAM,SAAC7H,GAAU,OAAGA,OAAO,EAAMqC,SAAU,CAAC,UAAGrC,EAAK,yCAAnC,GAC1B,EAEQ,YAAA2G,aAAR,iBAEI,KAAyB,QAApB,EAAAvL,gBAAI,EAAJA,KAAMiG,sBAAc,eAAEqB,KAAK,MAAM,IAAIzE,MAAM,0CAOhD,OAHA7C,KAAKiG,eAAe1F,IAAMP,KAAKwO,oBAAoBxO,KAAKiG,eAAeqB,KACvEtH,KAAKyO,iCAEEzO,KAAKiG,eAAe1F,GAC/B,EAEc,YAAAmL,kBAAd,sCAAmC9H,SAAO,mEAYtC,OAVA5D,KAAKiG,eAAe0H,gBAAkB3N,KAAK0O,uBAAuB1O,KAAKiG,eAAeyH,cACtF1N,KAAKkD,cAAwD,QAAzC,EAAAlD,KAAKiG,eAAeyH,aAAaiB,gBAAQ,eAAE1M,gBAAiB,KAE1E2M,EACN,CACI3L,KAAMjD,KAAKiG,eAAehD,KAC1BnD,MAAOE,KAAKiG,eAAe1F,IAC3B2C,aAAclD,KAAKkD,cAAgB,IAGvC,GAAM,IAAI2L,EAAaD,GAAavL,wBAApC,qBAGI,YAAAmL,oBAAR,SAA4BM,GAA5B,WAMUC,EALoB,SAAC1N,GACvB,IAAM2N,EAAUnI,OAAOoG,KAAK5L,GAAUuF,QAAO,SAAA1B,GAAW,OAAAA,EAAQO,SAAS,QAAjB,IAA2B,GACnF,QAAOuJ,GAAUA,EAAQrJ,MAAM,KAAK,EACxC,CAEesJ,CAAkBH,GAC3BzN,EAAgCyN,EAEhCI,EAAUH,EAAS,UAAGA,EAAM,SAAU,OACtCI,EAAaJ,EAAS,UAAGA,EAAM,YAAa,UAC5CK,EAAUL,EAAS,UAAGA,EAAM,SAAU,OAEtCM,EAAUhO,EAAS6N,GAASC,GAC5BG,EAAOjO,EAAS6N,GAASE,IAAY,GACrCG,EAAWlO,EAAS6N,GAAS,4BAE5B7N,EAAS6N,GAASC,UAClB9N,EAAS6N,GAASE,UAClB/N,EAAS6N,GAAS5G,mBAClBjH,EAAS6N,GAAS,yBAClB7N,EAAS6N,GAAS,qBAEzBlP,KAAKwP,cAAcH,GACnBrP,KAAKyP,eAAeJ,GACpBrP,KAAK0P,eAAeJ,GAEpB,IAAMK,EAAU,IAAItP,IAEduP,EAAe,SAACpL,EAAuEqL,GAEzF,IAAMC,EAAatL,EAAS8D,YACtB9H,EAAK,0BAAmBuP,KACxBC,EAAKF,EAAWtP,IAAMA,EAE5BmP,EAAQ5O,IAAIiP,EAAE,OAEPF,GAAU,CACbE,GAAE,EACFxP,GAAE,EACFL,KAAM0P,EACNI,MAAO,EAAKC,WAAW1L,EAAS+E,OAAS,EAAK4G,uBAAuB3L,EAAS+E,OAAS/E,EAAS+E,MAChGzD,eAAgB,EAAKsK,mBAAmB5L,EAAS+E,OACjD8G,OAAQ,EAAKH,WAAW1L,EAAS+E,OACjC+G,OAAQ,EAAKC,cAAcT,EAAW5P,WAAYmP,IAAY,GAC9DmB,YAAa,EAAKC,mBAAmBX,EAAW5P,WAAYmP,GAC5DqB,QAAS,EAAKC,eAAeb,EAAW5P,WAAYmP,GACpDuB,QAAS,EAAKC,eAAef,EAAWgB,SAAW,GAAIxB,GACvDtM,MAAOD,EAAa+M,EAAW9M,OAC/B+N,SAAU,EAAKC,gBAAgBlB,EAAWiB,UAAY,IACtDhL,KAAM,KACNwJ,SAAU,EAAK0B,gBAAgBjB,EAAIT,GACnC2B,WAAW,EACXC,aAAa,EACbC,YAAY,EACZxK,OAAQ,CAAEyK,QAAS,EAAKC,gBAAgB9M,EAAS+E,QACjDhI,KAAM,OAEd,EAEIwO,EAAc,aACPF,GACP,IAAMrL,EAAWnD,EAAS6N,GAASW,GAa/BvL,MAAM8E,QAAQ5E,GACdA,EAAS2C,SAAQ,SAACoK,GACd3B,EAAa2B,EAAQ1B,EACzB,IAEAD,EAAapL,EAAUqL,IAnB/B,IAAK,IAAMA,KAAWxO,EAAS6N,KAApBW,GAuBX,OAAOF,CACX,EAEQ,YAAAxE,oBAAR,SAA4BjN,GAGxB,OAAIyL,OAAO3J,KAAKkG,aAAe,KAE/BlG,KAAK9B,SAASiJ,SAAQ,SAAChG,GAAY,OAAAA,EAAQ2I,UAAY3I,EAAQyI,OAA5B,IAFQ1L,CAK/C,EAEQ,YAAAwQ,uBAAR,SAA+B5F,GAC3B,IAAM0I,EAAW3K,OAAO2G,OAAO,CAAC,EAAG1E,GAGnC,cAFO0I,EAASjE,cACTiE,EAASC,IACTD,CACX,EAMQ,YAAA/C,+BAAR,wBACUiD,EAAsB,SAACC,WACnBC,EAAYD,EAAQ9I,QAAQ,IAAK,KACvC,IAAqC,QAAjC,EAAmB,QAAnB,IAAK5C,sBAAc,eAAEyH,oBAAY,eAAE+D,MAAO,EAAKxL,eAAeyH,aAAa+D,IAAIG,GAAY,CAC3F,IAAMC,EAAM,EAAK5L,eAAeyH,aAAa+D,IAAIG,GAAWE,SAC5D,OAAOxN,MAAM8E,QAAQyI,GAAOA,EAAM,CAACA,GAGvC,MAAO,EACX,EAEmB,QAAnB,EAAA7R,KAAKiG,sBAAc,SAAE1F,IAAI4G,SAAQ,SAAC4K,SAWxBC,EAAcD,EAAY5R,KAAK0I,QAAQ,IAAK,KAC5CoJ,EAAe,EAAKhM,gBAAkB,EAAKA,eAAeyH,cAAgB,EAAKzH,eAAeyH,aAAa+D,IAAM,EAAKxL,eAAeyH,aAAa+D,IAAIO,GAAc,KAE1K,GAAIC,EAAc,CAKd,GAAIA,EAAaH,SAAU,CACvB,IAAII,EAAgB,OAAID,EAAaH,WAAQ,GAE7C,GAAIC,EAAYrB,QAAS,CACrB,IAAM,EAAoB,GAE1BqB,EAAYrB,QAAQvJ,SAAQ,SAACgL,GACrB7N,MAAM8E,QAAQ+I,GACdA,EAAIhL,SAAQ,SAACiL,GACLA,EAAUC,WAAW,EAAQvR,KAAI,MAAZ,EAAO,OAAS4Q,EAAoBU,EAAUC,aAAU,IAC7ED,EAAUE,MAAM,EAAQxR,KAAI,MAAZ,EAAO,OAAS4Q,EAAoBU,EAAUE,QAAK,GAC3E,KAEIH,EAAIE,WAAW,EAAQvR,KAAI,MAAZ,EAAO,OAAS4Q,EAAoBS,EAAIE,aAAU,IACjEF,EAAIG,MAAM,EAAQxR,KAAI,MAAZ,EAAO,OAAS4Q,EAAoBS,EAAIG,QAAK,IAEnE,IAEAJ,EAAgBA,EAAcK,OAAO,EAAQrL,QAGjD,IAAMsL,EAAa,OAAI,IAAIrK,IAAI+J,KAAc,GACxC3R,KAAI,SAACmD,GAAY,SAAK4C,QAAQ5C,EAAb,IACjBkD,OAAO/G,SAEZkS,EAAYS,WAAaA,EAAWzN,OAAS,EAAIyN,EAAa,KAK9D,IAAM,EAAgB,CAClB,YACA,OACA,SACA,YACA,UACA,UACA,OACA,UACA,UACA,aACA,QACA,WACA,YACA,eACA,WACA,SACA,YACA,UACA,WACA,MACA,UACA,QAGJ,GAAIT,EAAYS,WAAY,CACxB,IAAMC,EAAuBV,EAAYS,WAAWjS,KAAI,SAACmS,GACrD,OAAO7L,OAAOoG,KAAKyF,GACdjS,QAAO,SAACkS,EAAajP,GAClB,IAAM0D,EAAQ,EAAcwL,WAAU,SAAA1N,GAAW,OAAAA,IAAYxB,CAAZ,IACjD,IAAe,IAAX0D,EAAc,CACd,IAAMyL,EAAe,CAAC,EACtBA,EAAanP,GAAWgP,EAAgBhP,GACxCiP,EAAYvL,GAASyL,EAEzB,OAAOF,CACX,GAAG,IAAIrO,MAAMuC,OAAOoG,KAAKyF,GAAiB3N,QAAQ+N,KAAK,OACtDlM,OAAO/G,QAChB,IACAkS,EAAYS,WAAaC,GAKjC,GAAIR,EAAac,YAAa,CAC1B,IAAM,EAAsBd,EAAac,YACzChB,EAAYiB,aAAe,kBAChBC,SACDC,EAAqC,QAAb,IAAKhV,gBAAQ,eAAEqC,KAAI,SAAA4S,GAC7C,GAAIA,EAAeC,OAASH,EAMxB,MAAO,CACH,CACII,MAAO,UACPpD,MAAOkD,EAAeG,UAE1B,CACID,MAAO,SACPpD,MAAO,EAAKsD,qBAAqB,EAAoBN,GAAqBO,QAAU,IAExF,CACIH,MAAO,SACPpD,MAAO,EAAKwD,qBAAqB,EAAoBR,GAAqBS,WAAa,KAIvG,IACC9M,OAAOjH,IAGR,EAAAoS,EAAYiB,cAAalS,KAAI,eAAIoS,IAAa,KA3BlD,IAAK,IAAMD,KAAuB,IAAvBA,QA8BXlB,EAAYiB,aAAe,GA8B/B,GA1BIf,EAAa0B,OACb5B,EAAY6B,OAAS/M,OAAOoG,KAAKgF,EAAa0B,MAAMpT,KAAI,SAACmD,SAC/CmQ,EAAY5B,EAAa0B,KAAKjQ,GAAS0P,KACvCU,EAAY,CAAC,EACnB,IAAK,IAAMC,KAAYF,EAAW,CAE9B,IAAMX,EAASa,EAASlL,QAAQ,WAAY,OACtCmL,EAAcd,EAAOe,OAAO,GAAGC,cAAgBhB,EAAOiB,MAAM,GAClEtN,OAAO2G,OAAOsG,IAAS,MAAKE,GAAcH,EAAUE,GAAS,IAEjE,OAAOD,CACX,IAEA/B,EAAYnL,OAAOgN,OAAS7B,EAAY6B,OAAOnT,QAAO,SAACkS,EAAqBjP,GACxE,IAAM0Q,EAAc,KAAK1Q,GAEzB,cADO0Q,EAAYC,cACZ,UAAG1B,EAAW,YAAI9L,OAAOvG,OAAO8T,GAAajK,KAAK,KAE7D,GAAG,IAEH4H,EAAYnL,OAAO0N,YAAcvC,EAAY6B,OAAOnT,QAAO,SAACkS,EAAajP,GACrE,MAAO,UAAGiP,EAAW,YAAIjP,EAAQ6Q,cACrC,GAAG,KAIHtC,EAAauC,KAAM,CACnB,IAAMC,EAAUxC,EAAauC,KAC7BzC,EAAY0C,QAAU,UAAGA,EAAQR,OAAO,GAAGC,eAAa,OAAGO,EAAQN,MAAM,IAIzElC,EAAayC,WACb3C,EAAY2C,SAAWzC,EAAayC,UAKxC3C,EAAY4C,UAAY1C,EAAa0C,WAAa,KAClD5C,EAAY6C,MAAQ3C,EAAa2C,OAAS,KAC1C7C,EAAY8C,aAAe5C,EAAa4C,cAAgB,KACxD9C,EAAY2C,SAAWzC,EAAayC,UAAY,KAEhD3C,EAAYnM,cAAgB,EAAKkP,kBAAmB/C,EAAY9B,MAAQ8B,EAAY9B,MAAQ,GAAK8B,EAAY/O,OAC7G+O,EAAYlM,YAAc,EAAKiP,kBAAmB/C,EAAY9B,MAAQ8B,EAAY9B,MAAQ,GAAK8B,EAAY/O,OAGnH,GACJ,EAEQ,YAAAmN,uBAAR,SAA+BnR,GAC3B,IAAMmF,EAAI,KAAanF,EAAO,CAAEsI,KAAK,IAMrC,OALAnD,EAAE,QAAQ4Q,MAAK,WACX5Q,EAAEnE,MAAMgV,WAAW,KACvB,IAEA7Q,EAAE,QAAQ8Q,UAAU,eACb9Q,EAAE2H,KAAK,OAClB,EAEQ,YAAAgJ,kBAAR,SAA0B9V,EAAegE,GAErC,MAAO,aAAakS,KAAKlW,IAAmB,MAATgE,CACvC,EAEQ,YAAAoN,mBAAR,SAA2BpR,GACvB,OAAOgB,KAAK8U,kBAAkB9V,IAAUA,EAAM+N,WAAW,IAC7D,EAEQ,YAAAmD,WAAR,SAAmBlR,GACf,MAAO,qBAAqBkW,KAAKlW,EACrC,EAEQ,YAAAsS,gBAAR,SAAwBtS,GACpB,OAAIgB,KAAKkQ,WAAWlR,GACN,KAAaA,GACd4D,OAEN5D,CACX,EAEQ,YAAAwQ,cAAR,SAAsBH,GAElBA,OADAA,EAAU/K,MAAM8E,QAAQiG,GAAWA,EAAU,CAACA,KAC9CA,EAASlI,SAAQ,SAACzD,GACd,GAAIA,EAAQ4M,OACR,GAAI5M,EAAQ4M,OAAO6E,QAAS,CACxB,IAAMC,EAAO,IAAIC,KAAK3R,EAAQ4M,OAAO6E,QAAQ5L,OAC7C7F,EAAQ4M,OAAOgF,OAAS,CAAC,UAAGF,EAAKG,cAAgB,EAAC,YAAIH,EAAKI,aAAY,YAAIJ,EAAKK,mBAChF/R,EAAQ4M,OAAO/G,MAAQ,gBAAS6L,EAAKG,cAAgB,EAAC,YAAIH,EAAKI,aAAY,YAAIJ,EAAKK,uBAEjF,GAAI/R,EAAQ4M,OAAOoF,WAAahS,EAAQ4M,OAAOqF,QAAS,CAC3D,IAAMD,EAAY,IAAIL,KAAK3R,EAAQ4M,OAAOoF,UAAUnM,OAC9CoM,EAAU,IAAIN,KAAK3R,EAAQ4M,OAAOqF,QAAQpM,OAE1CqM,EAAmE,IAAvDD,EAAQF,iBAAmBC,EAAUD,kBACjDI,EAAaF,EAAQJ,cAAgBG,EAAUH,cAAiBK,EACtElS,EAAQ4M,OAAOgF,OAAS,CACpB,UAAGI,EAAUH,cAAgB,EAAC,YAAIG,EAAUF,aAAY,YAAIE,EAAUD,kBACtE,UAAGE,EAAQJ,cAAgB,EAAC,YAAII,EAAQH,aAAY,YAAIG,EAAQF,mBAGhE/R,EAAQ4M,OAAO/G,MADfsM,GAAa,EACU,UAAGH,EAAUH,cAAgB,EAAC,YAAIG,EAAUF,aAAY,YAAIE,EAAUD,iBAAgB,cAAME,EAAQJ,cAAgB,EAAC,YAAII,EAAQH,aAAY,YAAIG,EAAQF,kBAGzJ,UAAGI,EAAY,EAAC,0BAAkBF,EAAQJ,cAAgB,EAAC,YAAII,EAAQH,aAAY,YAAIG,EAAQF,uBAG7F,IAAI,KAC7B7Q,MAAM,mDAGtB,GACJ,EAEQ,YAAA2L,cAAR,SAAsBrQ,EAAoBmP,GAGtC,IAAMyG,EAAczG,OADpBA,EAAU/K,MAAM8E,QAAQiG,GAAWA,EAAU,CAACA,SACnB,EAAPA,EAASjE,MAAK,SAAClG,GAC/B,OAAOA,EAAQoD,YAAY9H,KAAON,CACtC,IACA,GAAI4V,GAAeA,EAAYxF,OAC3B,OAAOwF,EAAYxF,OAAO/G,KAElC,EAEQ,YAAAkH,mBAAR,SAA2BvQ,EAAoBmP,GAG3C,IAAMyG,EAAczG,OADpBA,EAAU/K,MAAM8E,QAAQiG,GAAWA,EAAU,CAACA,SACnB,EAAPA,EAASjE,MAAK,SAAClG,GAC/B,OAAOA,EAAQoD,YAAY9H,KAAON,CACtC,IACA,GAAI4V,GAAeA,EAAYxF,OAC3B,OAAOwF,EAAYxF,OAAOgF,MAElC,EAEQ,YAAA7F,eAAR,SAAuBJ,IACF/K,MAAM8E,QAAQiG,GAAWA,EAAU,CAACA,IAC5ClI,SAAQ,SAACzD,GACVA,EAAQqS,QAAUrS,EAAQqS,OAAOrF,UACjChN,EAAQqS,OAAOrF,QAAQ9D,KAAO/F,OAAOoG,KAAKvJ,EAAQqS,OAAOrF,SAASnQ,KAAI,SAACS,SACnE,OAAIsD,MAAM8E,QAAQ1F,EAAQqS,OAAOrF,QAAQ1P,IAC9B0C,EAAQqS,OAAOrF,QAAQ1P,GAAKT,KAAI,SAACmQ,GACpC,MAAO,CACH4B,KAAM5B,EAAQpI,YAAY+J,UAC1BA,UAAW3B,EAAQnH,MACnByM,KAAMhV,EAAIyE,SAAS,kBAAoB,WAAa,WAE5D,IAEO,CACH6M,KAAM5O,EAAQqS,OAAOrF,QAAQ1P,GAAKsH,YAAY+J,UAC9CA,UAAW3O,EAAQqS,OAAOrF,QAAQ1P,GAAKuI,MACnC7F,EAAQqS,OAAOrF,QAAQ1P,GAAKuI,MACwF,QAApH,EAAA7F,EAAQqS,OAAOrF,QAAQ1P,GAAK6F,OAAOoG,KAAKvJ,EAAQqS,OAAOrF,QAAQ1P,IAAM4F,QAAO,SAAA1B,GAAW,OAACA,EAAQ6H,WAAW,IAApB,IAA0B,WAAG,eAAExD,MAC1HyM,KAAMhV,EAAIyE,SAAS,kBACf,WACA,WACJwK,MAAQjP,EAAIyE,SAAS,kBAEjB,KADA/B,EAAQqS,OAAOrF,QAAQ1P,GAAK6F,OAAOoG,KAAKvJ,EAAQqS,OAAOrF,QAAQ1P,IAAM,IAAIuI,MAIzF,IAER,GACJ,EAEQ,YAAAoH,eAAR,SAAuBzQ,EAAoBmP,WAEjCyG,EAAczG,OADpBA,EAAU/K,MAAM8E,QAAQiG,GAAWA,EAAU,CAACA,SACnB,EAAPA,EAASjE,MAAK,SAACI,GAAM,OAAAA,EAAElD,YAAY9H,KAAON,CAArB,IACzC,OAAmC,QAA5B,EAAmB,QAAnB,EAAA4V,aAAW,EAAXA,EAAaC,cAAM,eAAErF,eAAO,eAAE9D,IACzC,EAEQ,YAAA8C,eAAR,SAAuBJ,GACdhL,MAAM8E,QAAQkG,KACfA,EAAO,CAACA,IAKZA,EAAK/O,KAAI,SAAA0V,GAAK,OAAAA,CAAA,IACT9O,SAAQ,SAACzD,GACN,GAAIA,GAAWA,EAAQkN,QAAS,CAC5B,IAAMA,EAAUlN,EAAQkN,QAAQrH,MAAMZ,SAAS,KAC3CjF,EAAQkN,QAAQrH,MAAM5D,MAAM,KAAK,GAAGuO,cACpCxQ,EAAQkN,QAAQrH,MAAM2K,cAC1BxQ,EAAQ6F,MAAQqH,OACb,GAAIlN,GAAWA,EAAQwS,OAAQ,CAClC,IAAMC,EAAYzS,EAAQwS,OAAOE,cAAcxF,QAAQrH,MAAMZ,SAAS,KAClEjF,EAAQwS,OAAOE,cAAcxF,QAAQrH,MAAM5D,MAAM,KAAK,GAAGuO,cACzDxQ,EAAQwS,OAAOE,cAAcxF,QAAQrH,MAAM2K,cAEzCmC,EAAc3S,EAAQwS,OAAOI,gBAAgB1F,QAAQrH,MAAMZ,SAAS,KACtEjF,EAAQwS,OAAOI,gBAAgB1F,QAAQrH,MAAM5D,MAAM,KAAK,GAAGuO,cAC3DxQ,EAAQwS,OAAOI,gBAAgB1F,QAAQrH,MAAM2K,cAEjDxQ,EAAQ6F,MAAQ,UAAG4M,EAAS,cAAME,GAE1C,GACR,EAEQ,YAAAxF,eAAR,SAAuBC,EAAiBxB,GAEpC,GAAIA,EACJ,CACI,IAAMiH,EAAmB,SAACC,GAAuB,OAAAA,EAAUpL,MAAK,SAAClG,GAAY,OAAAA,EAAQoD,YAAY9H,KAAOsQ,CAA3B,GAA5B,EAC3C2F,EAAWnS,MAAM8E,QAAQkG,GAAQiH,EAAiBjH,GAAQiH,EAAiB,CAACjH,IAElF,GAAImH,IAAa,YAAaA,GAAY,WAAYA,GAGlD,OAAOA,EAASlN,MAG5B,EAEQ,YAAAyH,gBAAR,SAAwBD,GAwBpB,MArBA,CACI,KAAM5T,EAASuZ,KACf,KAAMvZ,EAASwZ,SACf,KAAMxZ,EAASyZ,UACf,KAAMzZ,EAAS0Z,aACf,KAAM1Z,EAAS2Z,mBACf,KAAM3Z,EAAS4Z,SACf,KAAM5Z,EAAS6Z,YACf,KAAM7Z,EAAS8Z,gBACf,KAAO9Z,EAAS+Z,SAChB,MAAO/Z,EAASga,YAChB,MAAOha,EAASia,gBAChB,MAAOja,EAASka,UAChB,EAAGla,EAASma,OACZ,EAAGna,EAASoa,WACZ,EAAGpa,EAASqa,YACZ,EAAGra,EAASsa,eACZ,EAAGta,EAAS2Z,mBACZ,EAAG3Z,EAASua,YAGO3G,IAAa,IACxC,EAEQ,YAAA4G,YAAR,SAAoB5R,GAMhB,MAL4C,CACxC,IAAK,WACL,IAAK,YAGUA,EACvB,EAQQ,YAAA6R,mBAAR,SAA2BC,EAA+C3E,GAA1E,WAGI,YAHsE,IAAAA,IAAAA,EAAA,KAGlEA,aAAM,EAANA,EAAQnO,QAFe,KAGvBmO,EAASA,EAAOlH,UAAU,EAHH,KAG0BA,UAAU,EAAGkH,EAAOpG,YAAY,KAAO,GACjFoG,GAAU,SAGrBrM,OAAOsG,QAAQ0K,GAAO1Q,SAAQ,SAAC,gBAACnG,EAAG,KAAEiP,EAAK,KAE3B,SAAPjP,EACAkS,GAAU4E,OAAO7H,GAEZ3L,MAAM8E,QAAQ6G,GACnBA,EAAM9I,SAAQ,SAAA4Q,GACV7E,EAAS,EAAK0E,mBAAmBG,EAAW7E,EAChD,IAE2B,UAAtBlS,EAAIgL,UAAU,EAAE,KACrBkH,EAAS,EAAK0E,mBAAmB3H,EAAOiD,GAEhD,IAEOA,EACX,EAaQ,YAAAjC,gBAAR,SAAwBzQ,EAAYwX,SAMhC,GAAIA,GAAaA,EAAU,oBAAqB,CAC5C,IAAM,EAAe1T,MAAM8E,QAAQ4O,EAAU,qBACvCA,EAAU,oBAAoB5M,MAAK,SAAClG,GAAY,OAAAA,EAAQoD,YAAY,gBAAkB9H,CAAtC,IAChD,CAACwX,EAAU,qBAAqB5M,MAAK,SAAClG,GAAY,OAAAA,EAAQoD,YAAY,gBAAkB9H,CAAtC,IACxD,GAAI,GACIwX,EAAU,iBAAkB,CAC5B,GAAI1T,MAAM8E,QAAQ4O,EAAU,kBAAmB,CAC3C,IAAMC,EAA2C,QAA1B,EAAAD,EAAU,wBAAgB,eAAE5M,MAAK,SAAClG,GACrD,OAAOA,EAAQoD,YAAY9H,KAAO,EAAa8H,YAAY,WAC/D,IAMI,OAAOtI,KAAK4X,mBAAmBK,GAAkB,CAAC,GAwCtD,IAAK3T,MAAM8E,QAAQ4O,EAAU,iBAAiBzO,OAC1C,OAAOyO,EACJ,GAAI1T,MAAM8E,QAAQ4O,EAAU,iBAAiBzO,OAChD,OAAOyO,EAAU,iBAAiBzO,MAAMY,KAAK,IAC1C,GAAI6N,EAAU,iBAAiB,cAClC,OAAOA,EAAU,iBAAiB,cAAczO,OAMpE,OAAO,IACX,EAEQ,YAAAgK,qBAAR,SAA6BC,GACzB,OAAIA,EAAS,EACF,0BAAmBA,EAAOvO,QAAQ,GAAE,KACtCuO,EAAS,EACP,kCAA2BA,EAAOvO,QAAQ,GAAE,KAE5C,gBACf,EAEQ,YAAAwO,qBAAR,SAA6ByE,GACzB,OAAIA,EACOA,EAAOrP,QAAQ,IAAK,KAExB,gBACX,EACJ,EAlhCA,GCjBAsP,KAAKC,UAAY,SAAC,OAAExL,EAAI,OAEdyL,EAAgB,IAAIC,EAAc1L,GACxCyL,EAAc7V,QACTC,MAAK,SAACmK,GAAS,OAAAuL,KAAKI,YAAY3L,EAAjB,IACfnK,MAAK,WAAM,OAAA4V,EAAcvY,OAAd,IACX2C,MAAK,SAACmK,GAAS,OAAAuL,KAAKI,YAAY3L,EAAjB,IACfnK,MAAK,WAAM,OAAA4V,EAAc5M,OAAd,IACXhJ,MAAK,SAACmK,GAAS,OAAAuL,KAAKI,YAAY3L,EAAjB,IACfH,OAAM,SAACjB,GAAM,OAAAgN,YAAW,WAAQ,MAAM,IAAI3V,MAAMvE,KAAKC,UAAUiN,GAAI,GAAtD,GACtB,IChBIiN,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB5O,IAAjB6O,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAU3R,KAAK8R,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAGpEI,EAAOD,OACf,CAGAH,EAAoBtY,EAAI2Y,EAGxBL,EAAoBrN,EAAI,KAGvB,IAAI2N,EAAsBN,EAAoBO,OAAElP,EAAW,CAAC,MAAM,IAAO2O,EAAoB,QAE7F,OADsBA,EAAoBO,EAAED,EAClB,EVjCvBjc,EAAW,GACf2b,EAAoBO,EAAI,CAAC/F,EAAQgG,EAAUC,EAAIC,KAC9C,IAAGF,EAAH,CAMA,IAAIG,EAAeC,IACnB,IAASC,EAAI,EAAGA,EAAIxc,EAASgI,OAAQwU,IAAK,CAGzC,IAFA,IAAKL,EAAUC,EAAIC,GAAYrc,EAASwc,GACpCC,GAAY,EACPC,EAAI,EAAGA,EAAIP,EAASnU,OAAQ0U,MACpB,EAAXL,GAAsBC,GAAgBD,IAAavS,OAAOoG,KAAKyL,EAAoBO,GAAGS,OAAO1Y,GAAS0X,EAAoBO,EAAEjY,GAAKkY,EAASO,MAC9IP,EAASS,OAAOF,IAAK,IAErBD,GAAY,EACTJ,EAAWC,IAAcA,EAAeD,IAG7C,GAAGI,EAAW,CACbzc,EAAS4c,OAAOJ,IAAK,GACrB,IAAInR,EAAI+Q,SACEpP,IAAN3B,IAAiB8K,EAAS9K,EAC/B,CACD,CACA,OAAO8K,CAnBP,CAJCkG,EAAWA,GAAY,EACvB,IAAI,IAAIG,EAAIxc,EAASgI,OAAQwU,EAAI,GAAKxc,EAASwc,EAAI,GAAG,GAAKH,EAAUG,IAAKxc,EAASwc,GAAKxc,EAASwc,EAAI,GACrGxc,EAASwc,GAAK,CAACL,EAAUC,EAAIC,EAqBjB,EWzBdV,EAAoBkB,EAAKd,IACxB,IAAIe,EAASf,GAAUA,EAAOgB,WAC7B,IAAOhB,EAAiB,QACxB,IAAM,EAEP,OADAJ,EAAoBqB,EAAEF,EAAQ,CAAErW,EAAGqW,IAC5BA,CAAM,ECLdnB,EAAoBqB,EAAI,CAAClB,EAASmB,KACjC,IAAI,IAAIhZ,KAAOgZ,EACXtB,EAAoBuB,EAAED,EAAYhZ,KAAS0X,EAAoBuB,EAAEpB,EAAS7X,IAC5E6F,OAAOqT,eAAerB,EAAS7X,EAAK,CAAEmZ,YAAY,EAAMtZ,IAAKmZ,EAAWhZ,IAE1E,ECND0X,EAAoB0B,EAAI,CAAC,EAGzB1B,EAAoBlN,EAAK6O,GACjBzW,QAAQG,IAAI8C,OAAOoG,KAAKyL,EAAoB0B,GAAG3Z,QAAO,CAAC6C,EAAUtC,KACvE0X,EAAoB0B,EAAEpZ,GAAKqZ,EAAS/W,GAC7BA,IACL,KCNJoV,EAAoBzC,EAAKoE,GAEZA,EAAL,sCCFR3B,EAAoB4B,SAAYD,IAEf,ECHjB3B,EAAoBuB,EAAI,CAACM,EAAK/U,IAAUqB,OAAOC,UAAUC,eAAeC,KAAKuT,EAAK/U,GCClFkT,EAAoBtQ,EAAKyQ,IACH,oBAAX2B,QAA0BA,OAAOC,aAC1C5T,OAAOqT,eAAerB,EAAS2B,OAAOC,YAAa,CAAExK,MAAO,WAE7DpJ,OAAOqT,eAAerB,EAAS,aAAc,CAAE5I,OAAO,GAAO,ECL9DyI,EAAoBgC,EAAI,wBCIxB,IAAIC,EAAkB,CACrB,IAAK,GAgBNjC,EAAoB0B,EAAEb,EAAI,CAACc,EAAS/W,KAE/BqX,EAAgBN,IAElBO,cAAclC,EAAoBgC,EAAIhC,EAAoBzC,EAAEoE,GAE9D,EAGD,IAAIQ,EAAqB1C,KAA6B,uBAAIA,KAA6B,wBAAK,GACxF2C,EAA6BD,EAAmB/Z,KAAKia,KAAKF,GAC9DA,EAAmB/Z,KAvBC8L,IACnB,IAAKsM,EAAU8B,EAAaC,GAAWrO,EACvC,IAAI,IAAI+L,KAAYqC,EAChBtC,EAAoBuB,EAAEe,EAAarC,KACrCD,EAAoBtY,EAAEuY,GAAYqC,EAAYrC,IAIhD,IADGsC,GAASA,EAAQvC,GACdQ,EAASnU,QACd4V,EAAgBzB,EAASgC,OAAS,EACnCJ,EAA2BlO,EAAK,MlBnB7B5P,EAAO0b,EAAoBrN,EAC/BqN,EAAoBrN,EAAI,IAChBqN,EAAoBlN,EAAE,KAAK/I,KAAKzF,GmBDd0b,EAAoBrN","sources":["webpack://ixviewer-2/webpack/runtime/chunk loaded","webpack://ixviewer-2/webpack/runtime/startup chunk dependencies","webpack://ixviewer-2/./src/ts/interface/fact.ts","webpack://ixviewer-2/./src/ts/constants/constants.ts","webpack://ixviewer-2/./src/ts/helpers/utils.ts","webpack://ixviewer-2/./src/ts/helpers/fact-id-allocator.ts","webpack://ixviewer-2/./src/ts/fetch-merge/merge-data-utils.ts","webpack://ixviewer-2/./src/ts/fetch-merge/prepare-inline-doc.ts","webpack://ixviewer-2/./src/ts/fetch-merge/fetch-merge.ts","webpack://ixviewer-2/./src/ts/workers/workers.ts","webpack://ixviewer-2/webpack/bootstrap","webpack://ixviewer-2/webpack/runtime/compat get default export","webpack://ixviewer-2/webpack/runtime/define property getters","webpack://ixviewer-2/webpack/runtime/ensure chunk","webpack://ixviewer-2/webpack/runtime/get javascript chunk filename","webpack://ixviewer-2/webpack/runtime/get mini-css chunk filename","webpack://ixviewer-2/webpack/runtime/hasOwnProperty shorthand","webpack://ixviewer-2/webpack/runtime/make namespace object","webpack://ixviewer-2/webpack/runtime/publicPath","webpack://ixviewer-2/webpack/runtime/importScripts chunk loading","webpack://ixviewer-2/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(397).then(next);\n};","import { Xbrltype, reference } from \"./meta\";\n\nexport type Facts = { key: string, value: SingleFact } & Record<string, string>;\n\nexport interface SingleFact {\n    contextRef: string;\n    name: string;\n    ix: string;\n    id: string;\n    value?: string;\n    isAmountsOnly: boolean;\n    isTextOnly: boolean;\n    isNegativeOnly: boolean;\n    isHTML: boolean;\n    isSelected: boolean;\n    period: string;\n    periodDates?: string[];\n    scale: string | null;\n    decimals?: Decimals | null;\n    sign: string | null;\n    footnote: null | string;\n    isEnabled: boolean;\n    isHighlight: boolean;\n    references: Array<ReferenceAsArray> | null;\n    calculations: Array<Calculation[]>;\n    labels: LabelElement[];\n    xbrltype: string;\n    localname: string;\n    nsuri: string;\n    presentation: string[];\n    raw?: string;\n    format?: null | string;\n    isAdditional?: boolean;\n    isCustom?: boolean;\n    file: string | null;\n    unitRef?: string;\n    measure?: string;\n    balance?: Balance;\n    segment?: Array<SegmentClass[] | SegmentClass>;\n    isContinued: boolean;\n    continuedIDs: Array<string>;\n    \"xsi:nil\"?: string;\n    \"xml:lang\"?: string;\n}\n\n/** somehow, an object in fetch-merge metamorphosizes from SingleFact into this */\nexport interface SingleFact2\n{\n    name: string;\n    segment: [{ dimension: string, axis: string }];\n    references: reference[];\n    calculations: [{ label: string, value: string }] | [];\n    labels: string[];\n    filter: { labels: string; definitions: string; };\n    balance: string;\n    xbrltype: Xbrltype | null;\n    localname: string | null;\n    nsuri: string | null;\n    presentation: string[] | null | undefined;\n}\n\nexport enum Balance {\n    Credit = \"Credit\",\n    Debit = \"Debit\",\n}\n\nexport interface Calculation {\n    label: LabelEnum;\n    value: string;\n}\n\nexport enum LabelEnum\n{\n    Balance = \"Balance\",\n    Parent = \"Parent\",\n    Section = \"Section\",\n    Weight = \"Weight\",\n}\n\nexport enum Decimals\n{\n    Tens = \"Tens\",\n    Hundreds = \"Hundreds\",\n    Thousands = \"Thousands\",\n    TenThousands = \"Ten Thousands\",\n    HundredThousands = \"Hundred Thousands\",\n    Millions = \"Millions\",\n    TenMillions = \"Ten Millions\",\n    HundredMillions = \"Hundred Millions\",\n    Billions = \"Billions\",\n    TenBillions = \"Ten Billions\",\n    HundredBillions = \"Hundred Billions\",\n    Trillions = \"Trillions\",\n\n    Tenths = \"Tenths\",\n    Hundredths = \"Hundredths\",\n    Thousandths = \"Thousandths\",\n    TenThousandths = \"Ten Thousandths\",\n    HundredThousandths = \"Hundred Thousandths\",\n    Millionths = \"Millionths\",\n}\n\nexport interface LabelElement {\n    Documentation: string;\n    Label: string;\n    \"Terse Label\"?: string;\n    \"Verbose Label\"?: string;\n    \"Negated Terse Label\"?: string;\n    \"Total Label\"?: string;\n    \"Negated Label\"?: string;\n    \"Period End Label\"?: string;\n    \"Period Start Label\"?: string;\n    \"Negated Period End Label\"?: string;\n    \"Negated Period Start Label\"?: string;\n    \"Negated Total Label\"?: string;\n}\n\n// TODO: ask knowledge bearers if we maybe we create distint orders for each taxonomy body (fasb, sec, etc...) as they each probably have their own properties.\nexport interface Reference {\n    Publisher: string;\n    Name: string;\n    Number?: string;\n    IssueDate?: string;\n    Chapter?: string,\n    Article?: string;\n    Note?: string;\n    Section?: string;\n    Subsection?: string;\n    Topic?: string;\n    SubTopic?: string;\n    Paragraph?: string;\n    Subparagraph?: string;\n    Clause?: string,\n    Subclause?: string,\n    Example?: string,\n    Page?: string,\n    Exhibit?: string,\n    Footnote?: string,\n    Sentence?: string;\n    URI?: string;\n    URIDate?: string,\n}\n\ninterface RefProp {\n    string: string,\n}\nexport interface ReferenceAsArray {\n    ReferenceMember: Array<RefProp>\n}\n\nexport interface SegmentClass {\n    axis: string;\n    dimension: string;\n    type: string;\n    value?: null;\n}\n","/* Created by staff of the U.S. Securities and Exchange Commission.\n * Data and content created by government employees within the scope of their employment\n * are not subject to domestic copyright protection. 17 U.S.C. 105.\n */\n\nimport { Reference } from \"../interface/fact\";\nimport { FormInformation } from \"../interface/form-information\";\nimport { InlineFileMeta, InstanceFile } from \"../interface/instance-file\";\nimport { Section } from \"../interface/meta\";\n\n\n//Not really used (see comment below)\ntype MetaDocument = any;\n\n\n\nexport const Constants =\n{\n\tversion: \"24.4\",\n\tfeatureSet: \"plus\",\n\n\tscrollPosition: typeof window !== 'undefined' && window.localStorage.getItem(\"scrollPosition\") || \"start\",\n\n\thoverOption: typeof window !== 'undefined' && window.localStorage.getItem(\"hoverOption\") === \"true\" || false,\n\n\tgetHTMLAttributes: {} as Record<any, unknown>,\n\n\tgetPaginationPerPage: 10,\n\n\tgetHtmlOverallFactsCount: null as string | null,\n\n\tgetMetaSourceDocuments: [] as string[],\n\n\tgetMetaTags: [] as unknown[],\n\n\tgetInstanceFiles: [] as InstanceFile[],\n\n\tgetInlineFiles: [] as InlineFileMeta[],\n\n\tsections: [] as Section[],\n\n\tsetSections: (sections: Array<Section>): void => {\n\t\tif (sections) {\n\t\t\tConstants.sections = sections;\n\t\t\tsessionStorage.setItem('sections', JSON.stringify(sections));\n\t\t}\n\t},\n\n\tgetSectionsFromSessionStorage: (): Section[] => {\n\t\tconst sectionsFromLocal = sessionStorage.getItem('sections');\n\t\treturn JSON.parse(sectionsFromLocal || '[]') as Section[];\n\t},\n\n\tgetStdRef: {} as Record<string, Reference>,\n\n\tgetFormInformation: {} as FormInformation,\n\n\tgetMetaCustomPrefix: null as string | null,\n\n\t//These are never accessed outside of old unit tests\n\tgetMetaDts: null as MetaDocument | null,\n\tgetMetaDocuments: (input: string): MetaDocument | null => {\n\t\tif (input && typeof input === \"string\") {\n\t\t\treturn Constants.getMetaDts && Constants.getMetaDts[input]\n\t\t\t\t? Constants.getMetaDts[input]\n\t\t\t\t: null;\n\t\t}\n\n\t\treturn null;\n\t},\n\n\tgetScrollPosition: (): number => {\n\t\tconst currentScrollPosition = document.getElementById('dynamic-xbrl-form')!.scrollTop as number;\n\t\treturn currentScrollPosition;\n\t},\n\n\tgetNavBarsHeight: (): number => {\n\t\treturn document.querySelector<HTMLElement>('div[id=\"topNavs\"]')?.offsetHeight || 0;\n\t},\n\n\tsideBarPaginationState: {pageNumber: 0, totalPages: 0},\n\n};\n","/* Created by staff of the U.S. Securities and Exchange Commission.\n * Data and content created by government employees within the scope of their employment \n * are not subject to domestic copyright protection. 17 U.S.C. 105.\n */\n\nimport DOMPurify from \"dompurify\";\nimport { Constants } from \"../constants/constants\";\nimport { toBottomOfInlineDoc } from \"../pagination/inlineDocPagination\";\n\nexport const cleanSubstring = (orig: string, from: string, to: string) => {\n    return orig.substring(orig.search(from), orig.search(to) + to.length);\n}\n\nexport const convertToSelector = (input: string, sanitize=true) => {\n    const normalizedSelector = input.replaceAll('/', '-')\n        .replaceAll(' ', '-')\n        .replaceAll('#', '-')\n        .replaceAll('.', '-')\n    if (sanitize)\n        return DOMPurify.sanitize(normalizedSelector);\n    else {\n        return normalizedSelector;\n    }\n}\n\n// WIP\nexport const xmlToDom = (xmlNode: Node): Node | null => {\n    \n    if (!PRODUCTION) {\n        console.log('node.nodeType', xmlNode.nodeType)\n        console.log('node', xmlNode)\n    }\n    if (xmlNode.nodeType === 1) { // Element node\n        const element = document.createElement(xmlNode.nodeName)\n\n        // add attributes\n        if (xmlNode instanceof Element)\n        {\n            for(const attr of xmlNode.attributes)\n            {\n                element.setAttributeNS(attr.namespaceURI, attr.nodeName, attr.nodeValue || \"\");\n            }\n        }\n        \n        // recursively process child nodes\n        for(const child of xmlNode.childNodes)\n        {\n            const childNode = xmlToDom(child);\n            if (childNode) {\n                element.appendChild(childNode);\n            }\n        }\n\n        return element;\n    } else if (xmlNode.nodeType === 3) { // Text node\n        return document.createTextNode(xmlNode.nodeValue || \"\");\n    }\n    return null;\n}\n\n// WIP\nexport const findAllTagTypeInMarkupString = (markup: string, openTag: string, closeTag: string) => {\n    const allTags: string[] = [];\n\n    const startTagRegex = RegExp(openTag, 'gi') \n    let startTagResults = startTagRegex.exec(markup);\n    const footnoteStartIndices: number[] = [];\n    while(startTagResults) {\n        footnoteStartIndices.push(startTagResults.index);\n        startTagResults = startTagRegex.exec(markup);\n    }\n\n    const endTagRegex = RegExp(closeTag, 'gi');\n    let endTagResults = endTagRegex.exec(markup);\n    const footnoteEndIndices: number[] = [];\n    while(endTagResults) {\n        footnoteEndIndices.push(endTagResults.index + closeTag.length);\n        endTagResults = endTagRegex.exec(markup);\n    }\n\n    footnoteStartIndices.forEach((start, indexInArrayOfStarts) => {\n        const pluckedFootnote = markup.substring(start, footnoteEndIndices[indexInArrayOfStarts]);\n        allTags.push(pluckedFootnote);\n    });\n\n    return allTags;\n}\n\n\nexport function ixScrollTo(sectionElem: HTMLElement): void\n{\n    if (elemNearBottom(sectionElem))\n    {\n        toBottomOfInlineDoc();\n    }\n    else\n    {\n        sectionElem?.scrollIntoView({ behavior: \"smooth\", block: \"start\", inline: \"nearest\" });\n    }\n}\n\n/**\n * Determine if the provided element is within 1vh of the bottom of the screen.\n * @param target The Element to which we should scroll.\n * @param parentElem Not the scrollable parent. Probably the first descendent thereof.  Needs to be full-height, non-scrollable.\n * @param scrollableParent An ancestor of `target` that scrolls.\n * @returns boolean\n */\nfunction elemNearBottom(target: HTMLElement, parentElem?: HTMLElement, scrollableParent?: HTMLElement): boolean {\n    if (!parentElem) {\n        const currentInstance = Constants.getInstanceFiles.find(element => element.current);\n        const currentXHTML = currentInstance?.docs.find(element => element.current);\n        if (currentXHTML?.slug) {\n            parentElem = document.querySelector<HTMLElement>(`section[filing-url=\"${currentXHTML?.slug}\"]`) || undefined;\n        }\n    }\n    if (!scrollableParent) {\n        const currentInstance = Constants.getInstanceFiles.find(element => element.current);\n        const currentXHTML = currentInstance?.docs.find(element => element.current);\n        if (currentXHTML?.slug) {\n            scrollableParent = document.getElementById('dynamic-xbrl-form') || undefined;\n        }\n    }\n\n    const viewHeight = scrollableParent?.offsetHeight || 0;\n    const parentHt = parentElem?.offsetHeight || 0;\n\n    let distTopOfTargetToTopOfScrollableParent = 0;\n    let currentElement = target;\n\n    while (currentElement && currentElement !== parentElem) {\n        distTopOfTargetToTopOfScrollableParent += currentElement.offsetTop || 0;\n        currentElement = currentElement.offsetParent as HTMLElement;\n    }\n\n    if (scrollableParent == document.getElementById('dynamic-xbrl-form')) {\n        distTopOfTargetToTopOfScrollableParent -= Constants.getNavBarsHeight();\n    }\n\n    return distTopOfTargetToTopOfScrollableParent > parentHt - viewHeight;\n}\n\nexport function isTruthy<T>(t: T): t is NonNullable<T>\n{\n    return Boolean(t);\n}\n","import { SingleFact } from \"../interface/fact\";\n\n/* Created by staff of the U.S. Securities and Exchange Commission.\n * Data and content created by government employees within the scope of their employment\n * are not subject to domestic copyright protection. 17 U.S.C. 105.\n */\n\n\n//For the facts in the HTML that have no IDs...\nexport class FactIdAllocator\n{\n    private facts: Map<string, SingleFact>;\n    private noIdFactMap: Map<string, Array<string>> | null = null;\n\n    constructor(facts: Map<string, SingleFact>)\n    {\n        this.facts = facts;\n    }\n\n    public getId(contextRef?: string | null, name?: string | null): string | null\n    {\n        if (this.noIdFactMap == null)\n        {\n            let m = new Map<string, Array<string>>();\n            this.noIdFactMap = [...this.facts.values()]\n                .map(({ id, name, contextRef}) => [JSON.stringify({ name, contextRef }), id])\n                .reduce((acc, [nameCtxref, id]) =>\n                {\n                    let idList = acc.get(nameCtxref) || [];\n                    idList.push(id);\n                    acc.set(nameCtxref, idList);\n\n                    return acc;\n                }, m);\n        }\n\n        const key = JSON.stringify({ name, contextRef });\n        return this.noIdFactMap.get(key)?.shift() || null;\n    }\n}\n","import { Report, Section, SectionFact } from '../interface/meta';\nimport { convertToSelector } from \"../helpers/utils\";\nimport { FilingSummary } from '../interface/filing-summary';\n\n/**\n * Description\n * @param {any} filingSummary:any\n * @param {any} metaLinksReports:any\n * @returns {any} => Flatter array of metalinks reports (section items).\n */\nexport const buildSectionsArrayFlatter = (filingSummary: FilingSummary, metaLinksReports: Report[], metaVersion: string) => {\n    // 'sections' and 'reports' are synonymous here\n    const filingSummaryReports = filingSummary.MyReports.Report;\n    let filingSummaryInputFiles = filingSummary.InputFiles.File;\n    if (!Array.isArray(filingSummaryInputFiles)) filingSummaryInputFiles = [filingSummaryInputFiles];\n    \n    const reportsContainStatements: boolean = filingSummaryReports\n        .filter(r => r.MenuCategory)\n        .map(r => r.MenuCategory._text?.toLowerCase())\n        .some((menuCategory: string) => {\n            return menuCategory == 'statement' || 'statements';\n        })\n\n    const addInstanceProps = (section: Section) => {\n        // Get Doc Name for instance header for sections\n        const isHtmIsh = (fileName: string) => {\n            return fileName.includes('.htm') || fileName.includes('.html') || fileName.includes('.xhtml');\n        }\n        const reportFileInfo = filingSummaryInputFiles.filter(file => {\n            if (file._attributes && file._attributes?.original && isHtmIsh(file._text)) {\n                return section.instanceHtm.includes(file._attributes.original)\n            }\n        });\n        if (reportFileInfo.length) {\n            section.instanceDocName = reportFileInfo[0]?._attributes?.doctype;\n        } else {\n            console.error(`Cannot find instance file in FilingsSummary inputfiles`);\n        }\n        return section;\n    }\n\n    const addFactProps = (section: Section) => {\n        section.fact = getFactAttrsFromAnchorProps(section) || undefined;\n        const mrFact = section.fact;\n        if (mrFact?.file && mrFact?.ancestors && mrFact?.name) {\n            // if an ancestor is a fact name eg \"sbs:SbsefOrglStrDescTextBlock\", need to dress as name attribute\n            const handleSpecialAncestors = mrFact.ancestors.map((a: string) => {\n                if (a.includes(':')) {\n                    if (a.includes('ix:continuation')) return ''; // skip continuation ancestors\n                    return `[name=\"${a}\"]`\n                } else {\n                    return a;\n                }\n            });\n            const ancestorsRelevant = handleSpecialAncestors.reverse().filter((a:string) => a !== \"html\").join(' ');\n            section.inlineFactSelector = `section[filing-url=\"${mrFact.file}\"] > ${ancestorsRelevant} [name=\"${mrFact.name}\"][contextref=\"${mrFact.contextRef}\"]`;\n        }\n        return section;\n    }\n\n    const sectionsArray = metaLinksReports.map((metaReport: Report) => {\n        let section: Section = metaReport as unknown as Section;\n        if (Number(metaVersion) <= 2.1 || !section.menuCat) {\n            section.menuCat = section.subGroupType || section.groupType;\n        }\n        if (metaReport.menuCat && metaReport.shortName) {\n            section = addInstanceProps(section);\n            section = addFactProps(section);\n            section.menuCatMapped = mapCategoryName(section.menuCat, reportsContainStatements) || \"\";\n            section.domId = `sectionDoc-${convertToSelector(section.instanceDocName, false)}`\n\n            return section;\n        } else {\n            console.error('Cannot determine Section menuCat');\n        }\n    })\n    .filter((section): section is Section => !!(section?.fact && section.menuCatMapped));\n\n    return sectionsArray || [];\n}\n\nexport const getFactAttrsFromAnchorProps = (section: Section) => {\n    let fact: SectionFact | null = {};\n    fact.instance = section.instance; // number\n    // fact.menuCat = metaReport.menuCat;\n    if (section.uniqueAnchor) {\n        fact.name = section.uniqueAnchor.name;\n        fact.contextRef = section.uniqueAnchor.contextRef;\n        fact.file = section.uniqueAnchor.baseRef;\n        fact.ancestors = section.uniqueAnchor.ancestors;\n    } else if (section.firstAnchor) {\n        fact.name = section.firstAnchor.name;\n        fact.contextRef = section.firstAnchor.contextRef;\n        fact.file = section.firstAnchor.baseRef;\n        fact.ancestors = section.firstAnchor.ancestors;\n    } else {\n        console.warn(`no linkable fact for section ${section.shortName} (no anchor data)`)\n        /* DOC: \"As I recall, the reason for the anchors computed during rendering was that \n                some internal rendering process detail gets lost that neither filing summary.xml \n                nor metalinks.json could preserve (I think it had to do with how chrome will insert \n                elements like <tbody> if they were missing in the input…?), but since I can’t \n                remember what that might be (it’s certainly not obvious) go ahead and try.\" -WH email 4/1/2024 \n        */\n        fact = null;\n    }\n    return fact;\n}\n\n/**\n * Description\n * @param {string} input: string\n * @returns {string} => (string) mapped menu category name || null\n * @description use only when there are no 'statement' menu categories\n */\nconst mapCategoryName = (input: string, isStandard: boolean): string | null => {\n    const lowerCaseKey = input.toLowerCase();\n\n    /*\n        'When the FilingSummary does not have any ‘statement’ category reports for an instance, then the following mapping should be used.  \n        “Reports” is generic and covers all the other things that don’t need their reports grouped into levels of detail.  \n        “Statements” used to be the general case (2008-2020) but now they are becoming the special case.' - WH Mar 29, 2024\n    */\n    const noStatementCatNameMap = {\n        \"cover\": \"Reports\",\n        \"document\": \"Reports\",\n        // \"statement\": n/a\n        // \"Statements\": n/a\n        \"disclosure\": \"Reports\",\n        \"notes\": \"Reports\",\n        \"policies\": \"Reports\", /* very unlikely to happen */\n        \"tables\": \"Reports\", /* very unlikely to happen */\n        \"details\": \"Details\",/* example here {baseUrl}/oef24/oef05/out/FilingSummary.htm# */\n        \"prospectus\": \"Prospectus\",\n        \"rr_summaries\": \"RR Summaries\",/* example here {baseUrl}/oef24/oef13/out/FilingSummary.htm we no longer make fancy menus for these */\n        \"fee_exhibit\": \"RR Summaries\",\n        \"risk/return\": \"RR Summaries\"\n    };\n    const standardCatNameMap = {\n        \"cover\": \"Cover\",\n        \"document\": \"Document & Entity Information\",\n        \"statement\": \"Financial Statements\",\n        \"statements\": \"Financial Statements\",\n        \"disclosure\": \"Notes to the Financial Statements\",\n        \"notes\": \"Notes to Financial Statements\",\n        \"policies\": \"Accounting Policies\",\n        \"tables\": \"Notes Tables\",\n        \"details\": \"Notes Details\",\n        \"prospectus\": \"Prospectus\",\n        \"rr_summaries\": \"RR Summaries\",\n        \"fee_exhibit\": \"RR Summaries\",\n        \"risk/return\": \"RR Summaries\"\n    };\n\n    if (isStandard) {\n        if (lowerCaseKey in standardCatNameMap) {\n            return standardCatNameMap[lowerCaseKey as keyof typeof standardCatNameMap];\n        } else {\n            console.info(`standardCatNameMap doesn't contain key: %c${lowerCaseKey}`, \"color: deepskyblue\");\n            return null;\n        }\n    } else {\n        if (lowerCaseKey in noStatementCatNameMap) {\n            return noStatementCatNameMap[lowerCaseKey as keyof typeof noStatementCatNameMap];\n        } else {\n            console.info(`noStatementCatNameMap doesn't contain key: %c${lowerCaseKey}`, \"color: deepskyblue\");\n            return null;\n        }\n    }\n};\n\nexport function fetchText(url: string, init?: RequestInit): Promise<string | never>\n{\n    return fetch(url, init).then((response) =>\n    {\n        if (response.status >= 200 && response.status <= 299)\n            return response.text();\n        else\n            throw new Error(response.status.toString());\n    });\n}\n\nexport function fetchJson<T = any>(url: string, init?: RequestInit): Promise<T | never>\n{\n    return fetch(url, init).then((response) =>\n    {\n        if (response.status >= 200 && response.status <= 299)\n            return response.json();\n        else\n            throw new Error(response.status.toString());\n    });\n}\n\nexport function setScaleInfo(scale: string | number | undefined): string | null\n{\n    const scaleOptions: Record<string, string> =\n    {\n        0: \"Zero\",\n        1: \"Tens\",\n        2: \"Hundreds\",\n        3: \"Thousands\",\n        4: \"Ten thousands\",\n        5: \"Hundred thousands\",\n        6: \"Millions\",\n        7: \"Ten Millions\",\n        8: \"Hundred Millions\",\n        9: \"Billions\",\n        10: \"Ten Billions\",\n        11: \"Hundred Billions\",\n        12: \"Trillions\",\n        \"-1\": \"Tenths\",\n        \"-2\": \"Hundredths\",\n        \"-3\": \"Thousandths\",\n        \"-4\": \"Ten Thousandths\",\n        \"-5\": \"Hundred Thousandths\",\n        \"-6\": \"Millionths\"\n    };\n    \n    return scaleOptions[scale || \"\"] || null;\n}\n","import * as c from \"cheerio\";\nimport { Cheerio, load } from \"cheerio\";\nimport { ILogObj, Logger } from \"tslog\";\nimport { FactIdAllocator } from \"../helpers/fact-id-allocator\";\nimport { XhtmlFileMeta } from \"../interface/instance-file\";\nimport { SingleFact } from \"../interface/fact\";\nimport { setScaleInfo } from \"./merge-data-utils\";\n\n\n/* Created by staff of the U.S. Securities and Exchange Commission.\n * Data and content created by government employees within the scope of their employment\n * are not subject to domestic copyright protection. 17 U.S.C. 105.\n */\n\n\nexport type XhtmlPrepData =\n{\n    docs: XhtmlFileMeta[];\n    facts: Map<string, SingleFact>;\n    customPrefix: string\n}\n\nexport type XhtmlPrepResponse =\n{\n    facts: Map<string, SingleFact>;\n    xhtml: string;\n}\n\n//TODO: rename this class\nexport class XhtmlPrepper\n{\n    private docs: XhtmlFileMeta[];\n    private facts: Map<string, SingleFact>;\n    private readonly customPrefix: string;\n    private readonly idAllocator: FactIdAllocator;\n    \n    constructor({ docs, facts, customPrefix }: XhtmlPrepData)\n    {\n        this.docs = docs;\n        this.facts = facts;\n        this.customPrefix = customPrefix;\n\n        this.idAllocator = new FactIdAllocator(this.facts);\n    }\n\n    public doWork()\n    {\n        const promises = [...this.docs]\n            .sort((a, b) => +b.current - +a.current)\n            .map((doc) =>\n                new Promise<void>((resolve) =>\n                {\n                    this.applyElementDataToFact(doc);\n                    resolve();\n                }));\n\n        return Promise.all(promises);\n    }\n\n    private applyElementDataToFact(current: XhtmlFileMeta)\n    {\n        const LOGPERFORMANCE = true;\n        const startPerformance = performance.now();\n\n        let $ = load(current.xhtml, {});\n\n        const factElements = Array.from($(`[contextRef]`));\n\n        for(let factElem of factElements)\n        {\n            const id = $(factElem).attr(\"id\") || this.idAllocator.getId($(factElem).attr('contextref'), $(factElem).attr('name'));\n            if(id)\n            {\n                this.updateMap(id, $(factElem), current.slug);\n            }\n            else\n            {\n                const log: Logger<ILogObj> = new Logger();\n                log.error(`Fact [name] && [contextRef] could not be located in the Map Object.`);\n            }\n        }\n\n        const endPerformance = performance.now();\n        if (LOGPERFORMANCE)\n        {\n            const items = factElements.length;\n            const log: Logger<ILogObj> = new Logger();\n            log.debug(`FetchAndMerge.doWork() completed in: ${(endPerformance - startPerformance).toFixed(2)}ms - ${items} items`);\n        }\n    }\n\n    private updateMap(id: string, element: Cheerio<c.Element>, docSlug: string): string\n    {\n        const fact = this.facts.get(id);\n        if (!fact)\n        {\n            console.error(\"Cannot update map -- missing key:\", id);\n            return \"\";\n        }\n\n        this.facts.set(id,\n        {\n            ...fact,\n            raw: element.text(),\n            format: element.attr('format') ? element.attr('format') : null,\n            isAdditional: element.parents().prop('tagName').toLowerCase().endsWith(':hidden'),\n            isCustom: element.attr('name')?.split(':')[0].toLowerCase() === this.customPrefix,\n            isAmountsOnly: element.prop('tagName')?.split(':')[1].toLowerCase() === 'nonfraction',\n            isTextOnly: element.prop('tagName')?.split(':')[1].toLowerCase() === 'nonnumeric',\n            isNegativeOnly: element.attr('sign') === '-',\n            sign: (element.attr('sign') === '-') ? \"Negative\" : null,\n            file: docSlug,\n            scale: setScaleInfo(element.attr('scale')) || \"\",\n            continuedIDs: [],\n        });\n\n        return fact.id;\n    }\n}\n","import * as cheerio from 'cheerio';\nimport { Logger, ILogObj } from 'tslog';\nimport * as convert from 'xml-js';\nimport { cleanSubstring, isTruthy } from '../helpers/utils';\nimport { Decimals, Reference, SegmentClass, SingleFact } from '../interface/fact';\nimport { All, ErrorResponse, FMResponse, FetchMergeArgs } from '../interface/fetch-merge';\nimport { FilingSummary } from '../interface/filing-summary';\nimport { FormInformation } from '../interface/form-information';\nimport { UnitsAdditional } from '../interface/instance';\nimport { Context, DeiAmendmentFlagAttributes, Instance, LinkFootnote, LinkFootnoteArc, LinkLOC, Units } from '../interface/instance';\nimport { InstanceFile, MetaLinks, MetaLinksResponse, XhtmlFileMeta } from '../interface/instance-file';\nimport { Calculation, Meta, Section } from '../interface/meta';\nimport { UrlParams } from '../interface/url-params';\nimport { XhtmlPrepData, XhtmlPrepper } from './prepare-inline-doc';\nimport { buildSectionsArrayFlatter, fetchJson, fetchText, setScaleInfo } from './merge-data-utils';\n\n/* Created by staff of the U.S. Securities and Exchange Commission.\n * Data and content created by government employees within the scope of their employment\n * are not subject to domestic copyright protection. 17 U.S.C. 105.\n */\n\n\n/* eslint-disable @typescript-eslint/ban-types */\n\nexport class FetchAndMerge\n{\n    private absolute: string;\n    private params: UrlParams;\n    private customPrefix: string | null;\n    private activeInstance: InstanceFile = {} as any;\n    private std_ref;\n    private sections: Array<Section> = [];\n    private metaVersion: string | null = null;\n    private instances: InstanceFile[];\n\n\n    constructor(input: FetchMergeArgs)\n    {\n        this.absolute = input.absolute;\n        this.params = input.params;\n        this.customPrefix = input.customPrefix || null;\n        this.instances = input.instance ?? [];\n        this.std_ref = input.std_ref;\n    }\n\n    public async fetch(): Promise<FMResponse>\n    {\n        const docsAndInstance = () => {\n            return Promise.all([this.fetchDocs(), this.fetchInstanceXml()]).then(async ([docs, instXml]) => {\n                const errors = [...docs, instXml].filter((element): element is ErrorResponse =>\n                    element ? Object.prototype.hasOwnProperty.call(element, 'error') : false);\n\n                if (errors.length) {\n                    const errorMessages = errors.map(current => current.messages);\n                    throw { all: { error: true, messages: errorMessages.flat() } };\n                }\n\n                //At this point, neither of the responses had errors, so we can safely cast them\n                docs = docs as Array<{ xhtml: string }>;\n                instXml = instXml as Instance;\n\n                docs.filter((doc): doc is { xhtml: string } => \"xhtml\" in doc)\n                    .forEach((doc, index) => {\n                        this.activeInstance.docs[index].loaded = true;\n                        this.activeInstance.docs[index].xhtml = doc.xhtml;\n                    });\n\n                this.activeInstance.xml = instXml;\n            });\n        };\n\n        const metaAndSummary = () => {\n            return Promise.all([this.fetchMeta(), this.fetchSummary()])\n                .then(([ml, fs]) =>\n                {\n                    let error = false;\n                    const messages = [];\n                    for(const response of [ml, fs])\n                    {\n                        if (\"error\" in response && response.error)\n                        {\n                            messages.push(response.messages);\n                            error = true;\n                        }\n                    }\n                    if (error)\n                    {\n                        throw { all: { error, messages: messages.flat() } };\n                    }\n\n                    //At this point, neither of the responses had errors, so we can safely cast them\n                    const metalinks = ml as MetaLinks & { instances: InstanceFile[] };\n                    const filingSummary = fs as FilingSummary;\n                    \n                    this.metaVersion = metalinks.version || null;\n                    this.std_ref = metalinks.std_ref || {} as any;\n                    \n                    this.activeInstance = metalinks.instance;\n\n                    return [metalinks, filingSummary] as const;\n                });\n        };\n\n        /** Sets each instance's `xmlUrl` to the correct value  */\n        const getInstanceXmlUrlFromFilingSummary = (filingSummary: FilingSummary, instances: InstanceFile[]) => {\n            const filingSummaryReports = filingSummary.MyReports.Report;\n        \n            //track which HTML slugs we've seen already\n            const instanceHtmSlugs = new Set<string>;  // stored in filing summary as foo.htm\n            filingSummaryReports.forEach((r) => {\n                const reportInstanceHtmSlug = r._attributes?.instance;\n                if (reportInstanceHtmSlug && !instanceHtmSlugs.has(reportInstanceHtmSlug)) {\n                    instanceHtmSlugs.add(reportInstanceHtmSlug);\n\n                    // add xmlUrls to instances\n                    const [metaInstanceModel] = instances.filter((inst) => inst.instanceHtm.includes(reportInstanceHtmSlug));\n                    metaInstanceModel.xmlUrl = this.params.metalinks.replace('MetaLinks.json', reportInstanceHtmSlug.replace('.htm', '_htm.xml'));\n                }\n            });\n\n            //At this point, if the active instance has an invalid `xmlUrl`, we cannot continue\n            if (!this.activeInstance?.xmlUrl) {\n                throw new Error('Could not determine instance URL of active instance.');\n            }\n        }\n\n\n        try\n        {\n            let metalinks: (MetaLinks & { instances: InstanceFile[]}) | null = null;\n            this.activeInstance = this.instances.filter((element) => element.current)[0];\n            const initialLoad = this.activeInstance == null;\n\n            if (initialLoad)\n            {\n                const [meta, summ] = await metaAndSummary();\n                getInstanceXmlUrlFromFilingSummary(summ, meta.instances);\n                \n                // iterate over FilingSummary.xml Reports to build sections, adding data from metalinks\n                this.sections = buildSectionsArrayFlatter(summ, Object.values(meta.sections), this.metaVersion || \"\");\n                this.setSectionGroupType(this.sections);\n\n                metalinks = meta;\n                this.instances = metalinks.instances;\n            }\n\n            await docsAndInstance();\n\n            return { xhtml: this.activeInstance.docs.find((x) => x.current)?.xhtml || \"\" };\n        }\n        catch(e) { this.errorHandling(e) }\n    }\n\n    public async facts(): Promise<FMResponse>\n    {\n        try\n        {\n            return { facts: this.buildFactMap() };\n        }\n        catch(e) { this.errorHandling(e) }\n    }\n\n    public async merge(): Promise<All>\n    {\n        try\n        {\n            await this.mergeAllResponses();\n\n            const all =\n            {\n                instance: this.instances,\n                sections: this.sections,\n                std_ref: this.std_ref,\n            };\n\n            return { all };\n        }\n        catch(e) { this.errorHandling(e) }\n    }\n\n    private errorHandling(e: unknown): never\n    {  \n        console.error(e);\n\n        if (!!e && typeof e == \"object\" && \"all\" in e)\n            throw e as All;\n        else if (e instanceof Error)\n            throw { all: { error: true, messages: [e.message] } };\n        else\n            throw { all: { error: true, messages: [JSON.stringify(e)] } };\n    }\n\n    private decodeWorkstationXmlInHtml(isWorkstation: boolean, html: string, closingXml: string) {\n        if (!isWorkstation) return html; // not running on SEC EDGAR workstation which encodes xml in HTML\n\n        if (!html.substring(0,100).toLowerCase().includes(\"<html><head>\")) {\n            if (html.includes(\"<title>EDGAR SEC Workstation Login</title>\")) {\n                console.error(\"Workstation requires logging in\");\n                window.alert(\"Workstation requires logging in\");\n                return \"\";\n            }\n            return html; // it's xml, not html\n        }\n\n        // snip extraneous html from beginning and end of response which is present in versions of files on workstation\n        // only 5 encodings are used in xml\n        html = html.replaceAll('&lt;', '<');\n        html = html.replaceAll('&gt;', '>');\n        html = html.replaceAll('&quot;', '\"');\n        html = html.replaceAll('&apos;', '\\'');\n        html = html.replaceAll('&amp;', '&');\n        return html.substring(html.indexOf(\"<?xml version=\"), html.indexOf(closingXml) + closingXml.length)\n    }\n\n    /**\n     * Description\n     * @returns {any} => current .htm file (xhtml file) || \"Doc\"\n     */\n    private fetchDocs(): Promise<Array<{ xhtml: string } | ErrorResponse>> {\n        const promises = this.activeInstance?.docs?.map((doc: { url: string }) => {\n            return new Promise<{ xhtml: string } | ErrorResponse>((resolve) => {\n                //TODO: use `HelpersUrl.isWorkstation` instead\n                const isWorkstation = doc.url.includes(\"DisplayDocument.do?\");\n                let ixvUrl = doc.url;\n                if (isWorkstation) {\n                    if (Object.prototype.hasOwnProperty.call(this.params, 'redline') && this.params.redline) {\n                        ixvUrl = ixvUrl.replace('.htm', '_ix2.htm');\n                    } else {\n                        ixvUrl = ixvUrl.replace('.htm', '_ix1.htm');\n                    }\n                }\n\n                const params: RequestInit =\n                {\n                    headers: { \"Content-Type\": \"application/xhtml+xml\" },\n                    mode: 'no-cors',\n                    credentials: 'include',\n                };\n\n                fetchText(ixvUrl, params)\n                    .then((text) =>\n                    {\n                        // on SEC EDGAR workstation xhtml is encoded like this: <HTML><HEAD><TITLE> ... &lt;?xml ...\n                        const xhtmlData = this.decodeWorkstationXmlInHtml(isWorkstation, text, \"</html>\");\n                        resolve({ xhtml: xhtmlData });\n                    })\n                    .catch((error) =>\n                    {\n                        resolve({ error: true, messages: [`${error}; could not find \"${this.params.doc}\"`] });\n                    });\n            });\n        });\n\n        if (!promises)\n            return Promise.resolve([{ error: true, messages: [\"Issue fetching XHTMLs\"] }]);\n        else\n            return Promise.all(promises);\n    }\n\n    private fetchMeta(): Promise<ErrorResponse | (MetaLinks & { instances: InstanceFile[] })>\n    {\n        //TODO: use async/await to simplify this logic\n        return new Promise<(MetaLinks & { instances: InstanceFile[] }) | ErrorResponse>((resolve) => {\n            let jsonUrl = this.params.metalinks;\n            //TODO: use `HelpersUrl.isWorkstation` instead\n            const isWorkstation = jsonUrl.includes(\"DisplayDocument.do?\");\n            if (isWorkstation) {\n                if (Object.prototype.hasOwnProperty.call(this.params, 'redline') && this.params.redline) {\n                    jsonUrl = jsonUrl.replace('MetaLinks.json', 'PrivateMetaLinks.json');\n                }\n            }\n\n            return fetchJson(jsonUrl, { credentials: 'include' })\n                .then((data: MetaLinksResponse) => {\n                    let XHTMLSlug = this.params.doc.substring(this.params.doc.lastIndexOf('/') + 1);\n                    if (XHTMLSlug.startsWith(\"DisplayDocument.do\") || XHTMLSlug.startsWith(\"view.html\")) {\n                        XHTMLSlug = this.params.doc.substring(this.params.doc.lastIndexOf('filename=') + 9);\n                    }\n\n                    const instanceFileNames = Object.keys(data.instance).join().split(/[ ,]+/);\n                    let sections = {};\n                    if (instanceFileNames.includes(XHTMLSlug)) {\n                        const instanceObjects: InstanceFile[] = Object.entries(data.instance).map(([currentInstance, instData], instanceIndex) => {\n                            // Sections\n                            //TODO: combine these using `Object.entries`\n                            Object.keys(instData.report).forEach((report) => {\n                                instData.report[report].instanceIndex = instanceIndex; // why?\n                            });\n                            Object.values(instData.report).forEach(report => {\n                                report.instanceHtm = currentInstance;\n                            });\n\n                            //NOTE: `sections` get reassigned at every step of this loop, is unused in the rest of the logic\n                            //  per loop step, and gets returned (the last value to which it's assigned) once the loop ends\n                            sections = Object.assign(sections, instData.report);\n\n                            /* \n                                if instance key has space, e.g. \n                                    \"doc1.htm doc2.htm\": {...}, \n                                it is known as multi doc.\n                            */\n                            const xhtmls: XhtmlFileMeta[] = currentInstance.split(' ').map((element) => {\n                                return {\n                                    slug: element,\n                                    url: this.params.doc.replace(this.params['doc-file'], element),\n                                    xhtml: null as any,\n                                    current: currentInstance.split(' ').includes(XHTMLSlug) && element === this.params['doc-file'],\n                                    loaded: false,\n                                };\n                            });\n\n                            const instFile: InstanceFile =\n                            {\n                                current: currentInstance.split(' ').includes(XHTMLSlug),\n                                instance: instanceIndex, // Why?\n                                map: new Map<string, SingleFact>(),\n                                metaInstance: Object.assign(instData),\n                                instanceHtm: currentInstance,\n                                xmlUrl: null as any,\n                                docs: xhtmls,\n                                formInformation: {} as FormInformation,\n                                xmlSlugs: [],\n                            };\n\n                            return instFile;\n                        });\n\n                        const [instance] = instanceObjects.filter(({ current }) => current);\n                        const meta: MetaLinks = { ...data, instance, sections, version: data.version, meta: {} as Meta, inlineFiles: [] };\n                        resolve(Object.assign(meta, { instances: instanceObjects }));\n                    } else {\n                        // this may occur when transferring a filing from one domain to another.  Not sure how to fix...\n                        if (!PRODUCTION) {\n                            console.log('instanceFileNames does not include XHTMLSlug. fetch-merge > fetchMeta())')\n                        }\n                        throw new Error('Incorrect MetaLinks.json Instance');\n                    }\n                })\n                .catch((error) => resolve({ error: true, messages: [`${error}; could not find \"${this.params.metalinks}\"`] }));\n        });\n    }\n\n    private fetchSummary(): Promise<FilingSummary | ErrorResponse>\n    {\n        let filingSummXmlUrl = this.params.summary;\n\n        //TODO: use the new `isWorkstation` func in HelpersUrl instead\n        const isWorkstation = filingSummXmlUrl.includes(\"DisplayDocument.do?\");\n        if (isWorkstation && this.params.redline)\n        {\n            filingSummXmlUrl = filingSummXmlUrl.replace('FilingSummary.xml', 'PrivateFilingSummary.xml');\n        }\n\n        return fetchText(filingSummXmlUrl, { credentials: 'include' })\n            .then((data) =>\n            {\n                const xmlData = this.decodeWorkstationXmlInHtml(isWorkstation, data, \"</FilingSummary>\");\n                const convertedXml = convert.xml2json(xmlData, { compact: true });\n                return JSON.parse(convertedXml).FilingSummary as FilingSummary;\n            })\n            .catch((error) =>\n            {\n                return ({ error: true, messages: [`${error}; could not find \"${this.params.summary}\"`] })\n            });\n    }\n\n    private fetchInstanceXml(): Promise<Instance | ErrorResponse> {\n        let xmlUrl = this.activeInstance?.xmlUrl;\n        if (!xmlUrl) return Promise.reject({ error: true, messages: [\"Issue fetching XML URLs\"] });\n        \n        const isWorkstation = xmlUrl.includes(\"DisplayDocument.do?\");\n        if (isWorkstation) {\n            // If methods from HelpersUrl are used here some very strange bugs occur, such as window and localStorage undefined.\n            if (Object.prototype.hasOwnProperty.call(this.params, 'redline') && this.params.redline) {\n                xmlUrl = xmlUrl.replace('_htm.xml', '_ht2.xml')\n            } else {\n                xmlUrl = xmlUrl.replace('_htm.xml', '_ht1.xml')\n            }\n        }\n\n        //TODO: we used to pass `{ credentials: 'include' }` to `.then()` (which is wrong);\n        //  should we be passing it to `fetchText`??\n        return fetchText(xmlUrl)\n            .then((text) => {\n                const fetchedXMlString = this.decodeWorkstationXmlInHtml(isWorkstation, text, \"</xbrl>\");\n\n                /*\n                    Parsing with arg {compact: true} results in json being in different order and no longer flat\n                */\n                const instanceXmlAsJsonCompact: Instance = JSON.parse(convert.xml2json(fetchedXMlString, { compact: true }));\n\n                if (instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"] && DEBUGJS) {\n                    const footnotesNode = instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"];\n                    // grab xml data as non compact object so element order is preserved.\n                    instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"].expanded = JSON.parse(convert.xml2json(fetchedXMlString, { compact: false }));\n                    instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"].orderedFootnoteDivs = footnotesNode.expanded.elements[0].elements;\n                    instanceXmlAsJsonCompact.xbrl[\"link:footnoteLink\"].asXmlString = cleanSubstring(fetchedXMlString, '<link:footnoteLink', '</link:footnoteLink>');\n                }\n\n                return instanceXmlAsJsonCompact;\n            })\n            .catch((error) => ({ error: true, messages: [`${error}; could not find \"XML Instance Data\"`] }));\n    }\n\n    private buildFactMap(): Map<string, SingleFact>\n    {\n        if (!this?.activeInstance?.xml) throw new Error(\"Error: Active Instance has no XML data\");\n\n        // why set to index [0] ? !!!\n        // will this break on multidoc? !!!\n        this.activeInstance.map = this.buildInitialFactMap(this.activeInstance.xml);\n        this.enrichFactMapWithMetalinksData();\n\n        return this.activeInstance.map;\n    }\n\n    private async mergeAllResponses(): Promise<void>\n    {\n        this.activeInstance.formInformation = this.extractFormInformation(this.activeInstance.metaInstance);\n        this.customPrefix = this.activeInstance.metaInstance.nsprefix?.toLowerCase() || null;\n        \n        const prepperData: XhtmlPrepData =\n        {\n            docs: this.activeInstance.docs,\n            facts: this.activeInstance.map,\n            customPrefix: this.customPrefix || \"\",\n        };\n\n        await new XhtmlPrepper(prepperData).doWork();\n    }\n\n    private buildInitialFactMap(instanceXml: Instance): Map<string, SingleFact> {\n        const getInstancePrefix = (instance: Instance) => {\n            const options = Object.keys(instance).filter(element => element.endsWith(':xbrl'))[0];\n            return options ? options.split(':')[0] : false;\n        };\n\n        const prefix = getInstancePrefix(instanceXml);\n        const instance: Record<string, any> = instanceXml;\n\n        const xbrlKey = prefix ? `${prefix}:xbrl` : 'xbrl';\n        const contextKey = prefix ? `${prefix}:context` : 'context';\n        const unitKey = prefix ? `${prefix}:unit` : 'unit';\n\n        const context = instance[xbrlKey][contextKey];\n        const unit = instance[xbrlKey][unitKey] || [];\n        const footnote = instance[xbrlKey]['link:footnoteLink'];\n\n        delete instance[xbrlKey][contextKey];\n        delete instance[xbrlKey][unitKey];\n        delete instance[xbrlKey]._attributes;\n        delete instance[xbrlKey]['link:schemaRef'];\n        delete instance[xbrlKey]['link:footnoteLink'];\n\n        this.setPeriodText(context);\n        this.setSegmentData(context);\n        this.setMeasureText(unit);\n\n        const factMap = new Map<string, SingleFact>();\n\n        const addFactToMap = (factElem: { _attributes: DeiAmendmentFlagAttributes; _text: string; }, tagName: string) =>\n        {\n            const attributes = factElem._attributes;\n            const id = `fact-identifier-${factCounter++}`;\n            const ix = attributes.id || id ;\n\n            factMap.set(ix,\n            {\n                ...attributes,\n                ix,\n                id,\n                name: tagName,\n                value: this.isFactHTML(factElem._text) ? this.updateValueToRemoveIDs(factElem._text) : factElem._text,\n                isNegativeOnly: this.isFactNegativeOnly(factElem._text),\n                isHTML: this.isFactHTML(factElem._text),\n                period: this.setPeriodInfo(attributes.contextRef, context) || \"\",\n                periodDates: this.setPeriodDatesInfo(attributes.contextRef, context),\n                segment: this.setSegmentInfo(attributes.contextRef, context),\n                measure: this.setMeasureInfo(attributes.unitRef || \"\", unit),\n                scale: setScaleInfo(attributes.scale),\n                decimals: this.setDecimalsInfo(attributes.decimals || \"\"),\n                sign: null, // sign exists as attr in inlineDoc, not instance\n                footnote: this.setFootnoteInfo(ix, footnote),\n                isEnabled: true,\n                isHighlight: false,\n                isSelected: false,\n                filter: { content: this.getTextFromHTML(factElem._text) },\n                file: null,\n            });\n        }\n\n        let factCounter = 0;\n        for (const tagName in instance[xbrlKey]) {\n            const factElem = instance[xbrlKey][tagName];\n            /* example set of tagNames on instance.xbrl\n                _attributes\n                link:schemaRef\n                context\n                unit\n                dei:DocumentPeriodEndDate\n                dei:DocumentType\n                dei:EntityRegistrantName\n                dei:EntityCommonStockSharesOutstanding\n                i09203gd:Content4\n                link:footnoteLink\n            */\n            if (Array.isArray(factElem)) {\n                factElem.forEach((factEl: { _attributes: DeiAmendmentFlagAttributes; _text: string; }) => {\n                    addFactToMap(factEl, tagName);\n                });\n            } else {\n                addFactToMap(factElem, tagName);\n            }\n        }\n\n        return factMap;\n    }\n\n    private setSectionGroupType(sections: Section[]): Section[]\n    {\n        // groupType is used in Metalinks v2.1 (and presumably earlier) and was replaced by menuCat in 2.2\n        if (Number(this.metaVersion) < 2.2) return sections;\n\n        this.sections.forEach((section) => section.groupType = section.menuCat);\n\n        return sections;\n    }\n\n    private extractFormInformation(meta: Meta): FormInformation {\n        const metaCopy = Object.assign({}, meta);\n        delete metaCopy.report;\n        delete metaCopy.tag;\n        return metaCopy as unknown as  FormInformation;\n    }\n\n    /**\n     * Description\n     * @returns {any} => updates instance fact map (this.activeInstance.map) with data from meta (this.activeInstance.metaInstance)\n     */\n    private enrichFactMapWithMetalinksData() {\n        const getRefFromMetalinks = (concept: string): string[] => {\n            const mlConcept = concept.replace(':', '_');\n            if (this.activeInstance?.metaInstance?.tag && this.activeInstance.metaInstance.tag[mlConcept]) {\n                const ref = this.activeInstance.metaInstance.tag[mlConcept].auth_ref;\n                return Array.isArray(ref) ? ref : [ref];\n            }\n\n            return [];\n        }\n\n        this.activeInstance?.map.forEach((currentFact: SingleFact) => {\n            /* \n                @Doc: Fact 'tags' in metalinks.json vs fact 'names' in instance and doc files\n                facts are stored in metalinks.json under instance[<instanceName>].tags\n                Not sure why they are called 'tags'\n                Tags in xbrl speak are 'concepts', which are also qNames.\n                Some tag names look like: \n                    dei_AmendmentDescription\n                They have underscores, but in the instance and doc files they have colons:\n                    dei:AmendmentDescription\n            */\n            const factNameTag = currentFact.name.replace(':', '_');\n            const factObjectMl = this.activeInstance && this.activeInstance.metaInstance && this.activeInstance.metaInstance.tag ? this.activeInstance.metaInstance.tag[factNameTag]: null; // Ml being metalinks\n\n            if (factObjectMl) {\n\n                /* add references (if any) to each individual fact\n                including references via any dimension [name]\n                including references via any member [name] */\n                if (factObjectMl.auth_ref) {\n                    let referenceKeys = [...factObjectMl.auth_ref];\n\n                    if (currentFact.segment) {\n                        const refKeys: string[] = [];\n\n                        currentFact.segment.forEach((seg: any) => {\n                            if (Array.isArray(seg)) {\n                                seg.forEach((nestedSeg: any) => {\n                                    if (nestedSeg.dimension) refKeys.push(...getRefFromMetalinks(nestedSeg.dimension));\n                                    if (nestedSeg.axis) refKeys.push(...getRefFromMetalinks(nestedSeg.axis));\n                                })\n                            } else {\n                                if (seg.dimension) refKeys.push(...getRefFromMetalinks(seg.dimension));\n                                if (seg.axis) refKeys.push(...getRefFromMetalinks(seg.axis));\n                            }\n                        })\n\n                        referenceKeys = referenceKeys.concat(refKeys.flat());\n                    }\n\n                    const references = [...new Set(referenceKeys)]\n                        .map((current) => this.std_ref[current])\n                        .filter(Boolean);\n\n                    currentFact.references = references.length > 0 ? references : null;\n\n\n                    // this order specifically for Fact References\n                    // any other key => value will be ignored and not shown to the user\n                    const requiredOrder = [\n                        `Publisher`,\n                        `Name`,\n                        `Number`,\n                        `IssueDate`, // listed in xbrl book but not sure if I should add\n                        `Chapter`,\n                        `Article`,\n                        `Note`,\n                        `Exhibit`,\n                        `Section`,\n                        `Subsection`,\n                        `Topic`,\n                        `SubTopic`,\n                        `Paragraph`,\n                        `Subparagraph`,\n                        `Sentence`,\n                        `Clause`,\n                        `Subclause`,\n                        `Example`,\n                        `Footnote`,\n                        `URI`,\n                        `URIDate`,\n                        `role`,\n                    ];\n\n                    if (currentFact.references) {\n                        const refsWithOrderedProps = currentFact.references.map((singleReference: Reference) => {\n                            return Object.keys(singleReference)\n                                .reduce((accumulator, current) => {\n                                    const index = requiredOrder.findIndex(element => element === current);\n                                    if (index !== -1) {\n                                        const returnObject = {};\n                                        returnObject[current] = singleReference[current];\n                                        accumulator[index] = returnObject;\n                                    }\n                                    return accumulator;\n                                }, new Array(Object.keys(singleReference).length).fill(null))\n                                .filter(Boolean);\n                        });\n                        currentFact.references = refsWithOrderedProps;\n                    }\n                }\n\n                // add calculations (if any) to each individual fact\n                if (factObjectMl.calculation) {\n                    const tempFactCalculation = factObjectMl.calculation;\n                    currentFact.calculations = [];\n                    for (const factCalculationProp in tempFactCalculation) {\n                        const result: Calculation[] = this.sections?.map(sectionElement => {\n                            if (sectionElement.role === factCalculationProp) {\n                                /*\n                                    Walter comment: \"Although I traced the root cause to a problem in entry point sbsef-fex, still, \n                                    user actions can cause this.sections to be unbound when switching from one instance to another via the “instance” menu.  \n                                    So, this section should probably make sure that this.sections is at least an empty list:\"\n                                */\n                                return [\n                                    {\n                                        label: 'Section',\n                                        value: sectionElement.longName,\n                                    },\n                                    {\n                                        label: 'Weight',\n                                        value: this.getCalculationWeight(tempFactCalculation[factCalculationProp].weight || 0),\n                                    },\n                                    {\n                                        label: 'Parent',\n                                        value: this.getCalculationParent(tempFactCalculation[factCalculationProp].parentTag || \"\"),\n                                    },\n                                ];\n                            }\n                        })\n                        .filter(isTruthy);\n\n                        //As usual, this is pushing the wrong type onto the array, but it's been working so why fix it  :eyeroll:\n                        currentFact.calculations.push(...result as any);\n                    }\n                } else {\n                    currentFact.calculations = [];\n                }\n\n                // add labels (if any) to each individual fact\n                if (factObjectMl.lang) {\n                    currentFact.labels = Object.keys(factObjectMl.lang).map((current) => {\n                        const oldObject = factObjectMl.lang[current].role;\n                        const newObject = {};\n                        for (const property in oldObject) {\n\n                            const result = property.replace(/([A-Z])/g, ' $1');\n                            const finalResult = result.charAt(0).toUpperCase() + result.slice(1);\n                            Object.assign(newObject, { [finalResult]: oldObject[property] });\n                        }\n                        return newObject\n                    });\n\n                    currentFact.filter.labels = currentFact.labels.reduce((accumulator: string, current) => {\n                        const tempCurrent = { ...current };\n                        delete tempCurrent.documentation;\n                        return `${accumulator} ${Object.values(tempCurrent).join(' ')}`;\n\n                    }, '');\n\n                    currentFact.filter.definitions = currentFact.labels.reduce((accumulator, current: { Documentation: string; }) => {\n                        return `${accumulator} ${current.Documentation}`;\n                    }, '');\n                }\n\n                // add credit / debit\n                if (factObjectMl.crdr) {\n                    const balance = factObjectMl.crdr;\n                    currentFact.balance = `${balance.charAt(0).toUpperCase()}${balance.slice(1)}`;\n                }\n\n                // add xbrltype\n                if (factObjectMl.xbrltype) {\n                    currentFact.xbrltype = factObjectMl.xbrltype;\n                }\n\n                // add additional info to each individual fact\n                //TODO: why aren't these set to \"\" instead of null?\n                currentFact.localname = factObjectMl.localname || null as any;\n                currentFact.nsuri = factObjectMl.nsuri || null as any;\n                currentFact.presentation = factObjectMl.presentation || null as any;\n                currentFact.xbrltype = factObjectMl.xbrltype || null as any;\n\n                currentFact.isAmountsOnly = this.isFactAmountsOnly((currentFact.value ? currentFact.value : ''), currentFact.scale);\n                currentFact.isTextOnly = !this.isFactAmountsOnly((currentFact.value ? currentFact.value : ''), currentFact.scale);\n\n            }\n        });\n    }\n\n    private updateValueToRemoveIDs(input: string) {\n        const $ = cheerio.load(input, { xml: false });\n        $('[id]').each(function () {\n            $(this).removeAttr('id');\n        });\n        // we also wrap the entirety of the html in a simple div\n        $('body').wrapInner('<div></div>');\n        return $.html('body');\n    }\n\n    private isFactAmountsOnly(input: string, scale?: string | null | undefined): boolean\n    {\n        return /^-?\\d+\\d*$/.test(input) && scale != null;\n    }\n\n    private isFactNegativeOnly(input: string) {\n        return this.isFactAmountsOnly(input) && input.startsWith('-');\n    }\n\n    private isFactHTML(input: string) {\n        return /<\\/?[a-z][\\s\\S]*>/i.test(input);\n    }\n\n    private getTextFromHTML(input: string) {\n        if (this.isFactHTML(input)) {\n            const $ = cheerio.load(input);\n            return $.text();\n        }\n        return input;\n    }\n\n    private setPeriodText(context: Context[]) {\n        context = Array.isArray(context) ? context : [context];\n        context?.forEach((current) => {\n            if (current.period) {\n                if (current.period.instant) {\n                    const date = new Date(current.period.instant._text);\n                    current.period._array = [`${date.getUTCMonth() + 1}/${date.getUTCDate()}/${date.getUTCFullYear()}`];\n                    current.period._text = `As of ${date.getUTCMonth() + 1}/${date.getUTCDate()}/${date.getUTCFullYear()}`;\n\n                } else if (current.period.startDate && current.period.endDate) {\n                    const startDate = new Date(current.period.startDate._text);\n                    const endDate = new Date(current.period.endDate._text);\n\n                    const yearDiff = (endDate.getUTCFullYear() - startDate.getUTCFullYear())*12;\n                    const monthDiff = (endDate.getUTCMonth() - startDate.getUTCMonth()) + yearDiff;\n                    current.period._array = [\n                        `${startDate.getUTCMonth() + 1}/${startDate.getUTCDate()}/${startDate.getUTCFullYear()}`,\n                        `${endDate.getUTCMonth() + 1}/${endDate.getUTCDate()}/${endDate.getUTCFullYear()}`\n                    ];\n                    if (monthDiff <= 0) {\n                        current.period._text = `${startDate.getUTCMonth() + 1}/${startDate.getUTCDate()}/${startDate.getUTCFullYear()} - ${endDate.getUTCMonth() + 1}/${endDate.getUTCDate()}/${endDate.getUTCFullYear()}`;\n                    } else {\n                        //this is the naive approach to get month diffrence since we are not checking exact day, added 1 since Jan considered 0 in javascript\n                        current.period._text = `${monthDiff + 1} months ending ${endDate.getUTCMonth() + 1}/${endDate.getUTCDate()}/${endDate.getUTCFullYear()}`;\n                    }\n                } else {\n                    const log: Logger<ILogObj> = new Logger();\n                    log.error(`\\nFact Period is NEITHER Instant nor Start / End`);\n                }\n            }\n        });\n    }\n\n    private setPeriodInfo(contextRef: string, context: [Context]) {\n        // we go through and find the 'id' in context that equals contextRef\n        context = Array.isArray(context) ? context : [context];\n        const factContext = context?.find((element) => {\n            return element._attributes.id === contextRef;\n        });\n        if (factContext && factContext.period) {\n            return factContext.period._text;\n        }\n    }\n\n    private setPeriodDatesInfo(contextRef: string, context: [Context]) {\n        // we go through and find the 'id' in context that equals contextRef\n        context = Array.isArray(context) ? context : [context];\n        const factContext = context?.find((element) => {\n            return element._attributes.id === contextRef;\n        });\n        if (factContext && factContext.period) {\n            return factContext.period._array;\n        }\n    }\n\n    private setSegmentData(context: Context | undefined) {\n        const context2 = Array.isArray(context) ? context : [context];\n        context2.forEach((current) => {\n            if (current.entity && current.entity.segment) {\n                current.entity.segment.data = Object.keys(current.entity.segment).map((key) => {\n                    if (Array.isArray(current.entity.segment[key])) {\n                        return current.entity.segment[key].map((segment: { _attributes: { dimension: string; }; _text: string; }) => {\n                            return {\n                                axis: segment._attributes.dimension,\n                                dimension: segment._text,\n                                type: key.endsWith('explicitMember') ? 'explicit' : 'implicit'\n                            }\n                        });\n                    } else {\n                        return {\n                            axis: current.entity.segment[key]._attributes.dimension,\n                            dimension: current.entity.segment[key]._text ?\n                                current.entity.segment[key]._text :\n                                current.entity.segment[key][Object.keys(current.entity.segment[key]).filter(element => !element.startsWith('_'))[0]]?._text,\n                            type: key.endsWith('explicitMember') ?\n                                'explicit' :\n                                'implicit',\n                            value: !key.endsWith('explicitMember') ?\n                                current.entity.segment[key][Object.keys(current.entity.segment[key])[1]]._text :\n                                null\n                        };\n                    }\n                });\n            }\n        });\n    }\n\n    private setSegmentInfo(contextRef: string, context: Context[]): SegmentClass[] | undefined {\n        context = Array.isArray(context) ? context : [context];\n        const factContext = context?.find((e) => e._attributes.id === contextRef);\n        return factContext?.entity?.segment?.data;\n    }\n\n    private setMeasureText(unit: Units[]) {\n        if (!Array.isArray(unit)) {\n            unit = [unit];\n        }\n\n        //Note: we need to first trick TS into believing a Units is really a UnitsAdditional\n        //TODO: have `setMeasureText` take UnitsAdditional instead\n        unit.map(u => u as UnitsAdditional)\n            .forEach((current: UnitsAdditional) => {\n                if (current && current.measure) {\n                    const measure = current.measure._text.includes(':') ?\n                        current.measure._text.split(':')[1].toUpperCase() :\n                        current.measure._text.toUpperCase();\n                    current._text = measure;\n                } else if (current && current.divide) {\n                    const numerator = current.divide.unitNumerator.measure._text.includes(':') ?\n                        current.divide.unitNumerator.measure._text.split(':')[1].toUpperCase() :\n                        current.divide.unitNumerator.measure._text.toUpperCase();\n\n                    const denominator = current.divide.unitDenominator.measure._text.includes(':') ?\n                        current.divide.unitDenominator.measure._text.split(':')[1].toUpperCase() :\n                        current.divide.unitDenominator.measure._text.toUpperCase();\n\n                    current._text = `${numerator} / ${denominator}`;\n                }\n            });\n    }\n\n    private setMeasureInfo(unitRef: string, unit: Units): string | undefined\n    {\n        if (unit)\n        {\n            const findMatchingUnit = (unitArray: Units[]) => unitArray.find((element) => element._attributes.id === unitRef);\n            const factUnit = Array.isArray(unit) ? findMatchingUnit(unit) : findMatchingUnit([unit]);\n\n            if (factUnit && (\"measure\" in factUnit || \"divide\" in factUnit))\n            {\n                //Note: I suspect that we want factUnit.[\"measure\" || \"divide\"]._text\n                return factUnit._text;\n            }\n        }\n    }\n\n    private setDecimalsInfo(decimals: string): Decimals | null\n    {\n        const decimalsOptions: Record<string, Decimals> =\n        {\n            \"-1\": Decimals.Tens,\n            \"-2\": Decimals.Hundreds,\n            \"-3\": Decimals.Thousands,\n            \"-4\": Decimals.TenThousands,\n            \"-5\": Decimals.HundredThousandths,\n            \"-6\": Decimals.Millions,\n            \"-7\": Decimals.TenMillions,\n            \"-8\": Decimals.HundredMillions,\n            \"-9\":  Decimals.Billions,\n            \"-10\": Decimals.TenBillions,\n            \"-11\": Decimals.HundredBillions,\n            \"-12\": Decimals.Trillions,\n            1: Decimals.Tenths,\n            2: Decimals.Hundredths,\n            3: Decimals.Thousandths,\n            4: Decimals.TenThousandths,\n            5: Decimals.HundredThousandths,\n            6: Decimals.Millionths,\n        };\n\n        return decimalsOptions[decimals] || null;\n    }\n\n    private setSignInfo(sign: string): string | null {\n        const signOptions: Record<string, string> = {\n            '-': 'Negative',\n            '+': 'Positive',\n        };\n        \n        return signOptions[sign];\n    }\n\n    /**\n     * Description\n     * @param {any} ftObj:object\n     * @param {any} result?:string|undefined\n     * @returns {any} concatenated text from all footnote nodes, joined by a ' '\n     */\n    private accumulateFootnote(ftObj: LinkFootnote | Record<string, unknown>, result = \"\") {\n        const truncateFootnoteTo = 100;\n\n        if (result?.length > truncateFootnoteTo) {\n            result = result.substring(0, truncateFootnoteTo).substring(0, result.lastIndexOf(\" \") + 1);\n            return result += ' ...';\n        }\n\n        Object.entries(ftObj).forEach(([key, value]) =>\n        {\n            if (key == \"_text\") {\n                result += String(value);\n            }\n            else if (Array.isArray(value)) {\n                value.forEach(childNode => {\n                    result = this.accumulateFootnote(childNode, result);\n                })\n            }\n            else if (key.substring(0,6) == \"xhtml:\") {\n                result = this.accumulateFootnote(value, result);\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Description\n     * @param {any} id:string\n     * @param {any} footnotes:{\"link:loc\":LinkLOC[]\n     * @param {any} \"link:footnote\":LinkFootnote[];\"link:footnoteArc\":LinkFootnoteArc[];}\n     * @param {string} asXmlString footnotes part of fetched xml text\n     * @returns {any} renderable footnote text (or xml string) to be displayed in fact modal\n     * todo: handle incoming footnotes.asXmlString or footnotes.xmlExpanded to show all content (in order) instead of just text\n     * todo: handle images, tables, ...other html elements (currently just concatenating text content)\n     * the above todos are WIP and are handled when useFetchedFootnoteXmlStrings is set to true.\n     */\n    private setFootnoteInfo(id: string, footnotes: {\n        \"link:loc\": LinkLOC[],\n        \"link:footnote\": LinkFootnote[],\n        \"link:footnoteArc\": LinkFootnoteArc[],\n        \"asXmlString\": string,\n    }) {\n        if (footnotes && footnotes['link:footnoteArc']) {\n            const factFootnote = Array.isArray(footnotes['link:footnoteArc']) \n                ? footnotes['link:footnoteArc'].find((element) => element._attributes['xlink:from'] === id ) \n                : [footnotes['link:footnoteArc']].find((element) => element._attributes['xlink:from'] === id )\n            if (factFootnote) {\n                if (footnotes['link:footnote']) {\n                    if (Array.isArray(footnotes['link:footnote'])) {\n                        const actualFootnote = footnotes['link:footnote']?.find((element) => {\n                            return element._attributes.id === factFootnote._attributes['xlink:to'];\n                        });\n\n                        const useFetchedFootnoteXmlStrings = false;\n                        const useParsedFootnote = !useFetchedFootnoteXmlStrings;\n\n                        if (useParsedFootnote) {\n                            return this.accumulateFootnote(actualFootnote || {} as Record<string, unknown>);\n                        }\n\n                        // Rest of this if block is WIP for rendering all div types in footnote cell\n\n                        // GO FIND PART OF footnotes.xmlString that corresponds to actual footnote\n                        // return that substring ... so you can render it in fact-pages.ts\n                        // we only need '<link:footnote ... > string for each footnote to render\n                        // find all <link:footnote ... > xml strings and put in array\n                        // then find the one that matches the xlink:to value with its id\n\n                        const startTagRegex = /<link:footnote /gi; \n                        let startTagResults: RegExpExecArray | null = null;\n                        const footnoteStartIndices:number[] = [];\n                        while(!!(startTagResults = startTagRegex.exec(footnotes.asXmlString))) {\n                            footnoteStartIndices.push(startTagResults.index);\n                        }\n\n                        const endTagRegex = /<\\/link:footnote>/gi; \n                        let endTagResults: RegExpExecArray | null = null;\n                        const footnoteEndIndices:number[] = [];\n                        while(!!(endTagResults = endTagRegex.exec(footnotes.asXmlString))) {\n                            footnoteEndIndices.push(endTagResults.index + ('</link:footnote>').length);\n                        }\n\n                        const footnotesAsXmlStrings: string[] = [];\n\n                        footnoteStartIndices.forEach((start, indexInArrayOfStarts) => {\n                            const pluckedFootnote = footnotes.asXmlString.substring(start, footnoteEndIndices[indexInArrayOfStarts]);\n                            footnotesAsXmlStrings.push(pluckedFootnote);\n                        })\n\n                        const relevantFootnoteAsXmlString = footnotesAsXmlStrings.find(fn => {\n                            return fn.indexOf(factFootnote._attributes['xlink:to']) != -1;\n                        })\n\n                        return relevantFootnoteAsXmlString;\n                    } else {\n                        // TODO we need way more cases\n                        //uhh, no we don't, because the first 2 cases cover EVERYTHING\n                        if (!Array.isArray(footnotes['link:footnote']._text)) {\n                            return footnotes;\n                        } else if (Array.isArray(footnotes['link:footnote']._text)) {\n                            return footnotes['link:footnote']._text.join('');\n                        } else if (footnotes['link:footnote']['xhtml:span']) {\n                            return footnotes['link:footnote']['xhtml:span']._text;\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    private getCalculationWeight(weight: number) {\n        if (weight > 0)\n            return `Added to parent(${weight.toFixed(2)})`;\n        else if (weight < 0)\n            return `Substracted from parent(${weight.toFixed(2)})`;\n        else\n            return 'Not Available.';\n    }\n\n    private getCalculationParent(parent: string) {\n        if (parent) {\n            return parent.replace('_', ':');\n        }\n        return 'Not Available.';\n    }\n}\n","/* Created by staff of the U.S. Securities and Exchange Commission.\n * Data and content created by government employees within the scope of their employment\n * are not subject to domestic copyright protection. 17 U.S.C. 105.\n */\n\nimport { FetchAndMerge } from '../fetch-merge/fetch-merge';\n\nself.onmessage = ({ data }) =>\n{\n    const fetchAndMerge = new FetchAndMerge(data);\n    fetchAndMerge.fetch()\n        .then((data) => self.postMessage(data))\n        .then(() => fetchAndMerge.facts())\n        .then((data) => self.postMessage(data))\n        .then(() => fetchAndMerge.merge())\n        .then((data) => self.postMessage(data))\n        .catch((e) => setTimeout(() => { throw new Error(JSON.stringify(e)) }));\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [397], () => (__webpack_require__(7393)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.\" + \"763d759075c903583111\" + \".min.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/ixviewer-plus/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t549: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkixviewer_2\"] = self[\"webpackChunkixviewer_2\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["deferred","next","Balance","LabelEnum","Decimals","version","featureSet","scrollPosition","window","localStorage","getItem","hoverOption","getHTMLAttributes","getPaginationPerPage","getHtmlOverallFactsCount","getMetaSourceDocuments","getMetaTags","getInstanceFiles","getInlineFiles","sections","setSections","sessionStorage","setItem","JSON","stringify","getSectionsFromSessionStorage","sectionsFromLocal","parse","getStdRef","getFormInformation","getMetaCustomPrefix","getMetaDts","getMetaDocuments","input","getScrollPosition","document","getElementById","scrollTop","getNavBarsHeight","querySelector","offsetHeight","sideBarPaginationState","pageNumber","totalPages","isTruthy","t","Boolean","facts","noIdFactMap","this","getId","contextRef","name","m","Map","values","map","id","reduce","acc","nameCtxref","idList","get","push","set","key","shift","getFactAttrsFromAnchorProps","section","fact","instance","uniqueAnchor","file","baseRef","ancestors","firstAnchor","console","warn","shortName","mapCategoryName","isStandard","lowerCaseKey","toLowerCase","noStatementCatNameMap","standardCatNameMap","info","fetchText","url","init","fetch","then","response","status","text","Error","toString","setScaleInfo","scale","docs","customPrefix","idAllocator","FactIdAllocator","doWork","promises","sort","a","b","current","doc","Promise","resolve","applyElementDataToFact","all","startPerformance","performance","now","$","xhtml","factElements","Array","from","factElem","attr","updateMap","slug","error","endPerformance","items","length","debug","toFixed","element","docSlug","raw","format","isAdditional","parents","prop","endsWith","isCustom","split","isAmountsOnly","isTextOnly","isNegativeOnly","sign","continuedIDs","activeInstance","metaVersion","absolute","params","instances","std_ref","docsAndInstance","fetchDocs","fetchInstanceXml","instXml","errors","filter","Object","prototype","hasOwnProperty","call","messages","flat","forEach","index","loaded","xml","metaAndSummary","fetchMeta","fetchSummary","ml","fs","metalinks","filingSummary","getInstanceXmlUrlFromFilingSummary","filingSummaryReports","MyReports","Report","instanceHtmSlugs","Set","r","reportInstanceHtmSlug","_attributes","has","add","inst","instanceHtm","includes","xmlUrl","replace","meta","summ","metaLinksReports","filingSummaryInputFiles","InputFiles","File","isArray","reportsContainStatements","MenuCategory","_text","some","menuCategory","metaReport","Number","menuCat","subGroupType","groupType","undefined","mrFact","ancestorsRelevant","reverse","join","inlineFactSelector","addFactProps","reportFileInfo","fileName","original","instanceDocName","doctype","addInstanceProps","menuCatMapped","domId","sanitize","normalizedSelector","replaceAll","convertToSelector","buildSectionsArrayFlatter","setSectionGroupType","find","x","errorHandling","buildFactMap","e","merge","mergeAllResponses","message","decodeWorkstationXmlInHtml","isWorkstation","html","closingXml","substring","indexOf","alert","ixvUrl","redline","headers","mode","credentials","xhtmlData","catch","jsonUrl","json","data","XHTMLSlug","lastIndexOf","startsWith","instanceFileNames","keys","instanceObjects","entries","instanceIndex","currentInstance","instData","report","assign","xhtmls","metaInstance","formInformation","xmlSlugs","inlineFiles","filingSummXmlUrl","summary","xmlData","convertedXml","compact","FilingSummary","reject","fetchedXMlString","instanceXmlAsJsonCompact","xbrl","buildInitialFactMap","enrichFactMapWithMetalinksData","extractFormInformation","nsprefix","prepperData","XhtmlPrepper","instanceXml","prefix","options","getInstancePrefix","xbrlKey","contextKey","unitKey","context","unit","footnote","setPeriodText","setSegmentData","setMeasureText","factMap","addFactToMap","tagName","attributes","factCounter","ix","value","isFactHTML","updateValueToRemoveIDs","isFactNegativeOnly","isHTML","period","setPeriodInfo","periodDates","setPeriodDatesInfo","segment","setSegmentInfo","measure","setMeasureInfo","unitRef","decimals","setDecimalsInfo","setFootnoteInfo","isEnabled","isHighlight","isSelected","content","getTextFromHTML","factEl","metaCopy","tag","getRefFromMetalinks","concept","mlConcept","ref","auth_ref","currentFact","factNameTag","factObjectMl","referenceKeys","seg","nestedSeg","dimension","axis","concat","references","refsWithOrderedProps","singleReference","accumulator","findIndex","returnObject","fill","calculation","calculations","factCalculationProp","result","sectionElement","role","label","longName","getCalculationWeight","weight","getCalculationParent","parentTag","lang","labels","oldObject","newObject","property","finalResult","charAt","toUpperCase","slice","tempCurrent","documentation","definitions","Documentation","crdr","balance","xbrltype","localname","nsuri","presentation","isFactAmountsOnly","each","removeAttr","wrapInner","test","instant","date","Date","_array","getUTCMonth","getUTCDate","getUTCFullYear","startDate","endDate","yearDiff","monthDiff","factContext","entity","type","u","divide","numerator","unitNumerator","denominator","unitDenominator","findMatchingUnit","unitArray","factUnit","Tens","Hundreds","Thousands","TenThousands","HundredThousandths","Millions","TenMillions","HundredMillions","Billions","TenBillions","HundredBillions","Trillions","Tenths","Hundredths","Thousandths","TenThousandths","Millionths","setSignInfo","accumulateFootnote","ftObj","String","childNode","footnotes","actualFootnote","parent","self","onmessage","fetchAndMerge","FetchAndMerge","postMessage","setTimeout","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","__webpack_exports__","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","n","getter","__esModule","d","definition","o","defineProperty","enumerable","f","chunkId","miniCssF","obj","Symbol","toStringTag","p","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop"],"sourceRoot":""}